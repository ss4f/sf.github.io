[{"title":"��Ŀ��XXX���ѱ� OS X ʹ�ã����ܴ򿪡�������취","url":"http://shifei.online/2020/02/17/bugs/","content":"<p>���ն��н��뵽Ӳ���ڵĶ�Ӧ�ļ�Ŀ¼�����룺ls -l ������Կ�����</p>\n<p>��Щ��ռ�õ��ļ����Ժ��涼������@������ Mac OS X �ļ�ϵͳ�ĸ�������extended attributes��</p>\n<p>ִ�����xattr -c <em> . </em> �ɶ�Ŀ¼�������ļ����и������������</p>\n","categories":["bugs"],"tags":["bugs"]},{"title":"一日双城、一日双塔挑战记录","url":"http://shifei.online/2019/05/20/cycle/","content":"<ol>\n<li><a href=\"https://connect.garmin.com/modern/activity/1009707790\" target=\"_blank\" rel=\"noopener\">双城</a></li>\n<li><a href=\"https://connect.garmin.com/modern/activity/1070451224\" target=\"_blank\" rel=\"noopener\">双塔</a></li>\n</ol>\n","categories":["oneDayChallenge"],"tags":["Taiwan"]},{"title":"ps 人像懒人包","url":"http://shifei.online/2019/05/01/ps/","content":"<ol>\n<li><p>黑眼圈：画笔工具 ➡ 透明度 30%（10-30%） ➡ Opt + 鼠标左键吸正常肤色 ➡ 层叠覆盖，不要涂抹</p>\n</li>\n<li><p>去痘：两种方式</p>\n<ul>\n<li>修补工具 ➡ 鼠标勾勒轮廓 ➡ 移动至适用部位即可</li>\n<li>图章工具 ➡ 移动至光滑皮肤 Opt + 鼠标左键选择当前作为印章样式 ➡ 在痘上单机左键即可修复 </li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"3\">\n<li>磨皮：</li>\n</ol>\n<ul>\n<li>通道 ➡ 复制蓝色通道</li>\n<li>滤镜 ➡ 其他 ➡ 高反差保留 ➡ 半径 8 像素</li>\n<li>画笔 ➡ 前景色 #9f9f9f，硬度100%，透明度100%，流量100% 画出人像的眼睛和嘴巴</li>\n<li>图像 ➡ 计算 ➡ 混合模式：强光 ➡ 确定后得到 Alpha 1，重复至得到 Alpha 3</li>\n<li>Cmd + 点击 Alpha 3 的缩略图（选中光滑部分） ➡ Cmd + Shift + i （反选）</li>\n<li>添加曲线，在曲线从左到右近 4/5 处往上拖动（已基本光滑）</li>\n<li>Cmd + Opt + Shift + e 得到合并图层</li>\n<li>用修复工具去痘</li>\n<li>图层 ➡ 新建 ➡ 颜色：灰色；模式：柔光；钩上填充柔光中性色（50%灰）</li>\n<li>画笔 ➡ 选择合适的颜色去涂五官 ➡ 不透明度：35%，硬度：0</li>\n<li>调整 ➡ 色彩平衡（随意）</li>\n<li>Cmd + Opt + Shift + e 得到最终合并图层</li>\n</ul>\n","categories":["Photoshop"],"tags":["Photoshop"]},{"title":".gitignore 用法、模版与自动生成","url":"http://shifei.online/2019/02/26/gitignore/","content":"<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ul>\n<li>在根目录创建 .gitignore</li>\n<li><p>文件 .gitignore 的格式规范如下：</p>\n<ul>\n<li>所有空行或以 # 开头的\b行（注释）都会被Git忽略</li>\n<li>可以使用标准 glob 模式（shell 使用的简化正则表达式）匹配</li>\n<li>如要忽略目录则在后面添加\b反斜杠 /</li>\n<li>反向忽略可在模式前加惊叹号 ! 取反</li>\n</ul>\n<p>示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.json           # 忽略整个目录下所有以 .json 结尾的文件</span><br><span class=\"line\">!jsconfig.json   # 但jsconfig.json除外</span><br><span class=\"line\">/local           # 忽略主目录下的local文件（或文件夹）</span><br><span class=\"line\">library/         # 忽略library文件夹</span><br><span class=\"line\">assets/*.meta    # 忽略assets\b直属子目录下的所有 .meta 文件</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"自动生成-gitignore\"><a href=\"#自动生成-gitignore\" class=\"headerlink\" title=\"自动生成 .gitignore\"></a>自动生成 .gitignore</h3><p>访问<a href=\"https://gitignore.io/\" target=\"_blank\" rel=\"noopener\">gitignore.io</a></p>\n<hr>\n<h3 id=\"github-团队提供的各种语言的-gitignore-模版\"><a href=\"#github-团队提供的各种语言的-gitignore-模版\" class=\"headerlink\" title=\"github 团队提供的各种语言的 .gitignore 模版\"></a>github 团队提供的各种语言的 .gitignore 模版</h3><p><a href=\"https://github.com/github/gitignore/blob/master/Node.gitignore\" target=\"_blank\" rel=\"noopener\">node</a> 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Logs</span><br><span class=\"line\">logs</span><br><span class=\"line\">*.log</span><br><span class=\"line\">npm-debug.log*</span><br><span class=\"line\">yarn-debug.log*</span><br><span class=\"line\">yarn-error.log*</span><br><span class=\"line\"></span><br><span class=\"line\"># Runtime data</span><br><span class=\"line\">pids</span><br><span class=\"line\">*.pid</span><br><span class=\"line\">*.seed</span><br><span class=\"line\">*.pid.lock</span><br><span class=\"line\"></span><br><span class=\"line\"># Directory for instrumented libs generated by jscoverage/JSCover</span><br><span class=\"line\">lib-cov</span><br><span class=\"line\"></span><br><span class=\"line\"># Coverage directory used by tools like istanbul</span><br><span class=\"line\">coverage</span><br><span class=\"line\"></span><br><span class=\"line\"># nyc test coverage</span><br><span class=\"line\">.nyc_output</span><br><span class=\"line\"></span><br><span class=\"line\"># Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)</span><br><span class=\"line\">.grunt</span><br><span class=\"line\"></span><br><span class=\"line\"># Bower dependency directory (https://bower.io/)</span><br><span class=\"line\">bower_components</span><br><span class=\"line\"></span><br><span class=\"line\"># node-waf configuration</span><br><span class=\"line\">.lock-wscript</span><br><span class=\"line\"></span><br><span class=\"line\"># Compiled binary addons (https://nodejs.org/api/addons.html)</span><br><span class=\"line\">build/Release</span><br><span class=\"line\"></span><br><span class=\"line\"># Dependency directories</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">jspm_packages/</span><br><span class=\"line\"></span><br><span class=\"line\"># TypeScript v1 declaration files</span><br><span class=\"line\">typings/</span><br><span class=\"line\"></span><br><span class=\"line\"># Optional npm cache directory</span><br><span class=\"line\">.npm</span><br><span class=\"line\"></span><br><span class=\"line\"># Optional eslint cache</span><br><span class=\"line\">.eslintcache</span><br><span class=\"line\"></span><br><span class=\"line\"># Optional REPL history</span><br><span class=\"line\">.node_repl_history</span><br><span class=\"line\"></span><br><span class=\"line\"># Output of &apos;npm pack&apos;</span><br><span class=\"line\">*.tgz</span><br><span class=\"line\"></span><br><span class=\"line\"># Yarn Integrity file</span><br><span class=\"line\">.yarn-integrity</span><br><span class=\"line\"></span><br><span class=\"line\"># dotenv environment variables file</span><br><span class=\"line\">.env</span><br><span class=\"line\">.env.test</span><br><span class=\"line\"></span><br><span class=\"line\"># parcel-bundler cache (https://parceljs.org/)</span><br><span class=\"line\">.cache</span><br><span class=\"line\"></span><br><span class=\"line\"># next.js build output</span><br><span class=\"line\">.next</span><br><span class=\"line\"></span><br><span class=\"line\"># nuxt.js build output</span><br><span class=\"line\">.nuxt</span><br><span class=\"line\"></span><br><span class=\"line\"># vuepress build output</span><br><span class=\"line\">.vuepress/dist</span><br><span class=\"line\"></span><br><span class=\"line\"># Serverless directories</span><br><span class=\"line\">.serverless/</span><br><span class=\"line\"></span><br><span class=\"line\"># FuseBox cache</span><br><span class=\"line\">.fusebox/</span><br><span class=\"line\"></span><br><span class=\"line\"># DynamoDB Local files</span><br><span class=\"line\">.dynamodb/</span><br></pre></td></tr></table></figure>\n","categories":["programing"],"tags":["Git","gitignore"]},{"title":"Docker 注意事项","url":"http://shifei.online/2019/02/24/docker-tips/","content":"<ol>\n<li><p>在 docker 容器内使用 vim 时提示“vi: command not found”，需要先在容器里安装 vim，即运行<code>apt-get update &amp;&amp; apt-get -yq install vim</code> 即可</p>\n</li>\n<li><p><code>docker run</code> 的参数 <code>-p</code> 指<strong>主机（宿主）端口：容器端口</strong></p>\n</li>\n<li><p>docker 内运行 node，容器的端口和主机的端口必须全部与容器内运行的 node 端口一致</p>\n</li>\n</ol>\n","categories":["programing"],"tags":["docker"]},{"title":"VPS 服务器 ssr 基础操作简记","url":"http://shifei.online/2019/02/07/vps/","content":"<p><em>VPS \b被封几率太高，简列基本操作步骤方便使用</em></p>\n<ol>\n<li><p>服务器端一步搭建</p>\n<p> 参考<a href=\"https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">自建vps服务器教程</a></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2018.11.20 更新</span></span><br><span class=\"line\">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>服务端管理 \bssr（进入安装 ssr 目录后执行）：<code>bash ssr.sh</code> 或 <code>./ssr</code></p>\n</li>\n<li><p>免费 ssr 账号或浏览器翻墙</p>\n<p> <a href=\"https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7\" target=\"_blank\" rel=\"noopener\">GitHub</a><br> <a href=\"https://gitlab.com/Alvin9999/free/wikis/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7\" target=\"_blank\" rel=\"noopener\">Gitlab(备用)</a></p>\n</li>\n</ol>\n","categories":["fly"],"tags":["vps","ssr"]},{"title":"Node 笔记","url":"http://shifei.online/2019/01/16/node/","content":"<ol>\n<li>Node 使用了与 Web Workers 相同的模式解决线程中的问题，child_process 是基础 API，cluster 模块是更深层次应用。</li>\n<li>事件循环、观察者、请求对象、I/O 线程池共同构成 Node 异步 I/O模型的基本要素</li>\n<li>Node 中除了 JavaScript 是单线程， Node 自身是多线程，只是 I/O 线程使用的 CPU 较少</li>\n<li>Node 中除用户代码不不可并行执行，所有的 I/O（磁盘 I/O 和网络 I/O 等）都可以并行</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"5\">\n<li>一个\b程序如果大部分时间进行计算、逻辑判断，称为 <em>CPU 密集</em>（压缩、解压、加密、解密），如果\b多进行存取、网络操作，称为 <em>I/O 密集</em>（文件操作、网络操作、数据库）</li>\n<li>函数式编程包括高阶函数（函数作为参数或返回值）和偏函数用法（创建一个<em>调用另外一个参数或变量已经预置的函数</em>的函数）</li>\n<li>异步编程方案：</li>\n</ol>\n<ul>\n<li><p>事件监听模式，又称发布/订阅模式</p>\n<p>具有 addListener/on()、once()、removeListener()、removeAllListeners()、emit()等</p>\n</li>\n<li><p>Promise/Deferred 模式</p>\n<p>包括 Promises/A、Promises/B、Promises/D。</p>\n<p>一个 Promise \b对象具备 then() 方法，then() 定义为 <code>then(fulfilledHandler, errorHandler, progressHandler)</code>，接受完成态、错误态的回调，可选地支持 progress 事件回调。then() 只接受 function 对象，其余对象忽略，返回 Promise 对象，\b以实现链式调用。</p>\n</li>\n<li><p>流程控制库</p>\n<ul>\n<li><p>尾触发与 Next</p>\n<p>需要手工调用才能持续执行后续调用的方法称为尾触发，常见的关键词是 next。多用于 Connect 中间件，将复杂的处理逻辑拆解为单一的处理单元逐层处理请求对象和响应对象。</p>\n</li>\n<li><p>async</p>\n<ul>\n<li>异步的串行执行</li>\n<li>异步的并行执行（parallel()）</li>\n<li>异步调用的依赖处理（waterfall()）</li>\n<li>自动依赖处理（auto()）</li>\n</ul>\n</li>\n<li><p>Step</p>\n<p><code>Step(task1, task2, task3)</code></p>\n</li>\n<li><p>wind</p>\n</li>\n</ul>\n</li>\n<li><p>异步并发控制</p>\n<ul>\n<li>bagpipe</li>\n<li>async 的 parallelLimit()</li>\n</ul>\n</li>\n</ul>\n<ol start=\"8\">\n<li>进程与线程</li>\n</ol>\n<ul>\n<li><p>进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。</p>\n</li>\n<li><p>线程是进程内一个相对独立、可调度的执行单元，与同属一个进程的线程共享进程的资源。多线程指启动一个进程，在一个进程内启动多个线程，这样多个线程也可以一块执行多个任务</p>\n</li>\n</ul>\n<ol start=\"9\">\n<li>require 特性：</li>\n</ol>\n<ul>\n<li>module 被加载时执行，加载后缓存</li>\n<li>一旦出现某个模块被循环加载，就只输出已经执行的部分，未执行部分不输出</li>\n</ul>\n<ol start=\"10\">\n<li><p>commonJS 默认将 exports 设置为 module.exports，所以只能给 exports \b添加属性，不能修改指向（eg: exports = …)，修改后值为 undefined，\bcommonJS 模块对外输出永远是 module.exports。如想修改指向用 <code>module.exports = ...</code> 即可</p>\n</li>\n<li><p>path</p>\n</li>\n</ol>\n<ul>\n<li>“__dirname”、“__filename” 总是返回文件的绝对路径</li>\n<li>“process.cwd()” 总是返回执行 node 命令所在文件夹</li>\n<li>“./” 在 require 方法中总是相对当前文件所在文件夹（绝对路径）；在其他地方时则与 “process.cwd()” 相同</li>\n</ul>\n<ol start=\"12\">\n<li><p>Buffer 的实例 buf.length 表示申请的空间，而不是内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> buf = Buffer.from(<span class=\"string\">'this is a test!'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(buf.length) <span class=\"comment\">// 15（字节） 一个中文三个字节</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> buf2 = Buffer.allocUnsafe(<span class=\"number\">10</span>) <span class=\"comment\">// 或 const buf2 = Buffer.alloc(10)</span></span><br><span class=\"line\">buf2[<span class=\"number\">0</span>] = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(buf2.length) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ol>\n","categories":["programing"],"tags":["node"]},{"title":"Markdown Cheat Sheet","url":"http://shifei.online/2019/01/03/markdown/","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Element</th>\n<th style=\"text-align:left\">Markdown Syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">标题</td>\n<td style=\"text-align:left\"># H1<br> ## H2 <br> ### H3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">粗体</td>\n<td style=\"text-align:left\">**bold text**</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">斜体</td>\n<td style=\"text-align:left\">*italicized text*</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">引用</td>\n<td style=\"text-align:left\">> blockquote</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">有序列表</td>\n<td style=\"text-align:left\">1. First item <br> 2. Second item <br> 3. Third item</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">无序列表</td>\n<td style=\"text-align:left\">- First item <br> - Second item <br> - Third item</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">代码</td>\n<td style=\"text-align:left\">`code`</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">分割线</td>\n<td style=\"text-align:left\">---</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">链接</td>\n<td style=\"text-align:left\">[title](<a href=\"https://www.example.com\" target=\"_blank\" rel=\"noopener\">https://www.example.com</a>)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">图片</td>\n<td style=\"text-align:left\">![alt rext](image.jpg)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">表格</td>\n<td style=\"text-align:left\">&vert; Syntax &vert; Description &vert;<br> &vert; --------- &vert; --------- &vert;<br> &vert; Header &vert; Title &vert;<br> &vert; Paragraph &vert; Text &vert;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">分栏代码块</td>\n<td style=\"text-align:left\">```<br>{<br>“firstName”: John”,<br>“lastName”: “Smith”,<br>“age”: 25<br>}<br>```</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注释</td>\n<td style=\"text-align:left\">Here’s a sentence with a footnote. [^1]<br><br>[^1]: This is the footnote.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除线</td>\n<td style=\"text-align:left\">~~The world is flat.~~</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">待办列表</td>\n<td style=\"text-align:left\">- [x] Write the press release <br> - [ ] Update the website</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><ul>\n<li>表格内换行在语句末尾加<code>&lt;br&gt;</code>即可</li>\n<li><p>输入以下这些符号\b，需要在符号前加“\\”进行转义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\</span><br><span class=\"line\">`</span><br><span class=\"line\">*</span><br><span class=\"line\">_</span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\">[]</span><br><span class=\"line\">()</span><br><span class=\"line\">#</span><br><span class=\"line\">+</span><br><span class=\"line\">-</span><br><span class=\"line\">.</span><br><span class=\"line\">!</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入“|”，“\\”转义无效，需要使用\b字符实体，以下方法任选其一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;verbar; </span><br><span class=\"line\">&amp;vert; </span><br><span class=\"line\">&amp;VerticalLine; </span><br><span class=\"line\">&amp;#x0007C; </span><br><span class=\"line\">&amp;#124;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":["programing"],"tags":["markdown"]},{"title":"书籍资源整理","url":"http://shifei.online/2019/01/03/books/","content":"<p><em>整理部分质量较高的书籍资源，持续更新</em></p>\n<h2 id=\"技术类\"><a href=\"#技术类\" class=\"headerlink\" title=\"技术类\"></a>技术类</h2><ol>\n<li><p>Node.js.8.the.Right.Way.2018版  <a href=\"https://pan.baidu.com/s/1Z43JvxwRq5skV9V-GqVP4Q\" target=\"_blank\" rel=\"noopener\">下载地址</a>  密码:k6af\b</p>\n</li>\n<li><p>深入浅出Node.js  <a href=\"https://pan.baidu.com/s/1NkwWzwodBbJHtyC9XoC0LA\" target=\"_blank\" rel=\"noopener\">下载地址</a>  密码:4i3t</p>\n</li>\n<li><p>pro git  <a href=\"https://pan.baidu.com/s/1kAuzbyFf0-4Pi3cqvDRg6Q\" target=\"_blank\" rel=\"noopener\">下载地址</a>  密码:d06p</p>\n</li>\n<li><p>Learning the bash Shell, 2nd Ed - 2Nd Edition  <a href=\"https://pan.baidu.com/s/1DYmiS7QkhelM7Wano9TeyQ\" target=\"_blank\" rel=\"noopener\">下载地址</a>  密码:98o3</p>\n</li>\n<li><p>代码大全2  <a href=\"https://pan.baidu.com/s/1qxTUpFCTo5wl-mvw6fAUjQ\" target=\"_blank\" rel=\"noopener\">下载地址</a>  密码:64he</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"杂书\"><a href=\"#杂书\" class=\"headerlink\" title=\"杂书\"></a>杂书</h2><ol>\n<li><p>商务印书馆A类哲学本 153本  <a href=\"https://pan.baidu.com/s/1EEy3IQCBzlTbImi5GmHUsA\" target=\"_blank\" rel=\"noopener\">下载地址</a>  密码:kvmx</p>\n</li>\n<li><p>红太阳是怎样升起的：延安整风运动的来龙去脉  <a href=\"https://u17766478.ctfile.com/fs/17766478-328721125\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</li>\n<li><p>加缪全集（6册） <a href=\"https://pan.baidu.com/s/1YHhjheodUDHmIqjfdiaoRw\" target=\"_blank\" rel=\"noopener\">下载地址</a>  密码:sn31</p>\n</li>\n</ol>\n","categories":["resources"],"tags":["books"]},{"title":"Linux 常用命令","url":"http://shifei.online/2018/12/14/Linux-kb/","content":"<ol>\n<li>进程<ul>\n<li>查看占用某端口的程序： <code>lsof -i:xxxx</code></li>\n<li>结束进程： <code>kill [PID]</code></li>\n<li>查看某端口进程： <code>netstat -ant | grep [port]</code></li>\n<li>查看某端口进程（包括pid）： <code>netstat -antp | grep [port]</code> （加p即可）</li>\n<li>终止当前进程： <code>control-C</code></li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li><p>文件</p>\n<ul>\n<li>显示当前目录的内容： <code>ls</code></li>\n<li>查看隐藏内容： <code>ls -a</code></li>\n<li>查看较多信息： <code>ll</code>（<code>ls -l</code> 的缩写）</li>\n<li>显示路径的权限： <code>namei -om /[path]</code></li>\n<li>查看文件运行路径： <code>which [filename]</code></li>\n<li>查看文件安装路径： <code>whereis [filename]</code></li>\n<li>执行脚本： <code>source [filename]</code> 或 <code>./[filename]</code></li>\n<li>将文件变为可执行文件： <code>chmod +x [file-name]</code></li>\n<li>清除到开头： <code>command-K</code></li>\n<li>按照文件名查找： <code>find -[file-name]</code> （配合 xargs 能执行基本所以有的文件操作）</li>\n<li>移动/重命名某个文件或文件夹： <code>mv [file/folder]</code></li>\n<li>查看软件\b版本： <code>[software-name] -v</code> 或 <code>[software-name] --version</code></li>\n</ul>\n</li>\n<li><p>网络</p>\n<ul>\n<li>查看IP： <code>ifconfig</code> （在 en0 的 inet）</li>\n</ul>\n</li>\n<li><p>服务器</p>\n<ul>\n<li>ssh 免密登录服务器： <code>ssh-copy-id -p [port] [user]@[host]</code></li>\n<li>ssh 指定某个公钥免密码登陆服务器 \b<code>ssh-copy-id -i [filename] -p [port] [user]@[host]</code>）</li>\n<li>从远处复制文件到本地： <code>scp (-P [port]) [remote_username]@[remote_ip]:[remote-file] [local_path]</code></li>\n<li>从远处复制文件夹到本地： （加一个参数r即可）<code>scp -r (-P [port]) [remote_username]@[remote_ip]:[remote-folder] [local_path]</code></li>\n<li>从本地上传文件到远处： <code>scp [local_file] (-P [port]) [remote_user]@[remote_ip]:[remote_path]</code></li>\n<li>从本地上传文件夹到远处： <code>scp -r [local_folder] (-P [port]) [remote_user]@[remote_ip]:[remote_path]</code></li>\n</ul>\n</li>\n</ol>\n","categories":["programing","keyboard"],"tags":["keyboard","Linux"]},{"title":"VPS 服务端 CentOS + Nginx 结合本地 Hexo + Rsync 部署技术博客到独立域名的完整要点总结","url":"http://shifei.online/2018/12/10/hexo/","content":"<h3 id=\"1-既定为已购入-vps-和域名，这里只简述流程\"><a href=\"#1-既定为已购入-vps-和域名，这里只简述流程\" class=\"headerlink\" title=\"1. 既定为已购入 vps 和域名，这里只简述流程\"></a>1. 既定为已购入 vps 和域名，这里只简述流程</h3><p>在<a href=\"https://bwh1.net/\" target=\"_blank\" rel=\"noopener\">bandwagon</a> 等上购买 vps，在 Kivi panel \b设置好 vps 的\b配置，我安装的是 CentOS，在本地通过 ssh 连接能够成功连接到 \bvps 即可。在 <a href=\"https://www.namesilo.com/index.php\" target=\"_blank\" rel=\"noopener\">namesilo</a> 等\b购买域名，根据需求设置域名的 DNS 解析，可以设置多个映射，也可以添加 email 等。这里需要添加刚部署好的\b vps 主机地址。</p>\n<a id=\"more\"></a>\n<p>因为购买的是国外 vps，所以需要将\b此 vps 解析才能在国内正常访问（如购买国内 vps 无需进行下步操作）。在 <a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">dnspod</a> 注册账户（一般如果只要支持博客免费账户即可），添加 vps 主机地址进行域名解析，并且这个网站提供有免费监控，\b根据需求设置即可。</p>\n<p>完成这些步骤后，\b测试若在 VPS 上编辑内容，直接打开域名可查看这些内容即为成功。</p>\n<h3 id=\"2-在本地安装-Node-和-Hexo，可成功访问到本地的临时-Hexo-页面即可\"><a href=\"#2-在本地安装-Node-和-Hexo，可成功访问到本地的临时-Hexo-页面即可\" class=\"headerlink\" title=\"2. 在本地安装 Node 和 Hexo，可成功访问到本地的临时 \bHexo 页面即可\"></a>2. 在本地安装 Node 和 Hexo，可成功访问到本地的临时 \bHexo 页面即可</h3><h3 id=\"3-服务端设置反向代理至独立域名\"><a href=\"#3-服务端设置反向代理至独立域名\" class=\"headerlink\" title=\"3. 服务端设置反向代理至独立域名\"></a>3. 服务端设置反向代理至独立域名</h3><p>在 Linux 上安装 EPEL 和 Nginx：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install epel-release</span><br><span class=\"line\">$ sudo yum install nginx</span><br></pre></td></tr></table></figure></p>\n<p>安装过程中可能会遇到的问题在另一篇博客中列举，此处不赘述。</p>\n<p>安装完成后启动 Nginx：<code>sudo systemctl start nginx</code>，此时访问 \bVPS 主机地址（不用写端口号）可看到 Nginx 的欢迎页。</p>\n<p>下面进行 Nginx 的配置：</p>\n<ul>\n<li><p>\b新建文件夹，目的是存放\b这个博客页面需要的文件，这个文件夹\b地址可以随意设置，只要所有的配置文件注意地址统一即可，这里将文件存放在<code>/var/www/blog</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /var/www/blog</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在\b这个文件夹内新建<code>index.html</code>，用于测试，内容如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>My Blog<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>The Blog server block is successful<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置反向代理，即 Nginx 的配置文件</p>\n<p>在 <code>/etc/nginx/conf.d</code> 新建配置文件 <code>blog.conf</code>（什么名字都可以）</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> [::]:<span class=\"number\">80</span>;</span><br><span class=\"line\">  <span class=\"attribute\">root</span> /var/www/blog;</span><br><span class=\"line\">  <span class=\"attribute\">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> shifei.online www.shifei.online;</span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =<span class=\"number\">404</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 Nginx，使新设定生效（不重启则无效）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>\n<p>打开域名网址，如看到之前写的 html 页面则配置成功。</p>\n</li>\n</ul>\n<h3 id=\"4-将本地-Hexo-部署到域名\"><a href=\"#4-将本地-Hexo-部署到域名\" class=\"headerlink\" title=\"4. 将本地 Hexo 部署到域名\"></a>4. 将本地 Hexo 部署到域名</h3><p>在两端分别安装 rsync， 服务端执行 <code>yum install rsync</code>，本地执行<code>npm install hexo-deployer-rsync --save</code>。</p>\n<p>在本地的 Hexo 整体配置文件 <code>_config.yml</code> 中修改 ‘deploy’ 的设置，可参考如下配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span> </span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">rsync</span></span><br><span class=\"line\"><span class=\"attr\">  host:</span> <span class=\"number\">144.296</span><span class=\"number\">.129</span><span class=\"number\">.92</span>  <span class=\"comment\"># VPS 地址</span></span><br><span class=\"line\"><span class=\"attr\">  user:</span> <span class=\"string\">root</span>  <span class=\"comment\"># VPS 登陆用户名</span></span><br><span class=\"line\"><span class=\"attr\">  root:</span> <span class=\"string\">/var/www/blog</span>  <span class=\"comment\"># 同步更新的所有页面存放文件夹</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">640</span>  <span class=\"comment\"># VPS 端口号</span></span><br><span class=\"line\"><span class=\"attr\">  delete:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 删除远程主机上的旧文件</span></span><br><span class=\"line\"><span class=\"attr\">  verbose:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 显示调试信息</span></span><br><span class=\"line\"><span class=\"attr\">  ignore_errors:</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 不忽略错误（前五项必填）</span></span><br></pre></td></tr></table></figure></p>\n<p>部署完成，以后每次本地更新完博客内容后，执行 <code>hexo g -d</code> 即可推送至服务器，在服务端可以通过 <code>ssh-copy-id</code> 获得本地这台机器的\b证书，可以免密\b登陆（以免每次更新都要输入密码）。</p>\n","categories":["programing"],"tags":["hexo","vps","domain","nginx"]},{"title":"centos 安装 nginx 时提示‘No package nginx available‘或’Nothing to do‘","url":"http://shifei.online/2018/12/10/nginx错误/","content":"<p>出现该问题的原因是本地 yum 源中没有 nginx，需要创建一个 ‘/etc/yum.repos.d/nginx.repo’ 文件，新增一个 yum 源</p>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@144 ~]<span class=\"comment\"># vim /etc/yum.repos.d/nginx.repo</span></span><br><span class=\"line\"><span class=\"comment\">#在文件中写入以下内容：</span></span><br><span class=\"line\">[nginx]</span><br><span class=\"line\">name=nginx repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n","categories":["programing"],"tags":["nginx"]},{"title":"台湾九合一选举之思","url":"http://shifei.online/2018/12/10/taiwan/","content":"<h3 id=\"台湾九合一选举之思\"><a href=\"#台湾九合一选举之思\" class=\"headerlink\" title=\"台湾九合一选举之思\"></a>台湾九合一选举之思</h3><p>从半个多月前选举直播开始关注这次选举，逐渐对台湾的选举制度和一些政客有一些粗浅的了解，就算不能做到完全中立，还是尽量保持客观的角度谈论我的看法，并由浅及深，寻找问题的根源在何处。</p>\n<a id=\"more\"></a>\n<p>凭良心讲，这几天一直在疑惑到底为什么竟有半数的人不会支持柯文哲这种人，踏实做事，不搞政治，不求名利，台北市支持率反而是台湾垫底，仅仅是因为触碰了某些人的利益么？难道说他的所作所为老百姓都不是有目共睹的吗？宁愿选择空口白话的政治家上台都不要这样24*7来为台湾未来着想的人吗？</p>\n<p>今天下午蔡柯会，看完之后这个苦恼真的让我烦到顶峰，心里烦得很，什么都做不下去，随意翻着一些早期的视频，还是烦躁，出去篼个风，冷风一吹，一个非常大胆的想法迸发出来，并且按着这样推理下去，似乎所有问题都迎刃而解了，不过这些问题更深层次的根源让人想了越发沉重。</p>\n<p>既然选举时会有很多出格和疯狂的举动，如果说所有的黑料全是假的呢？14年就已经见识过了，没有办法，团队从各个角度来讲实力都相差悬殊，今年更甚，网络这招已经不管用了，顺便说一句奉劝想找网红各位用多了就烂了；其次，为了选举，政客真的没有底线，是完全没有底线的，从柯p这边来看，起码没有故意抹黑，人心险恶，可以用更险恶去打败，但有些人选择不去做。这里我并不是一味的脑残粉一样去盲目的喜欢或相信，有一件事，我可以说是绝无可能的，就是柯文哲和大陆联合活摘器官这件事。</p>\n<p>说到活摘，真的笑出声了，我真的感谢台湾的媒体这么高估内地的医院，如此的有人性。不是说台湾的媒体无知，因为整体的舆论氛围相比大陆来讲是很开放，没有太多的是非观念，什么事情张口就来，没有过调查，也常被当作利用工具，不会像大陆一般的限制多多，这个不能讲那个不许讲，但是我头一次发现什么都能讲也不见得都是好事。</p>\n<p>关于内地的活摘，我研究了很长时间，不是光凭这边或者那边的几个漏洞百出的视频或者文章就断定出的，到现在，我差不多可以下一个结论：活摘在大陆存在（过）的可能性是很大的。可能早起或许是跟轮子有关系，后来可能更多是死囚吧，但是希望所有人能了解，到目前，大陆同胞的就医质量相对还是比较低的，当然了我说的是平民老百姓，有钱人另当别论。多少人就因为交不起那几百几千的急诊费用死在医院的？又多了多少起伤医暴力事件？看病需要多少红包才能治好？当然我也不是说医生不负责任，只是现在社会发展种种原因导致这种现状，医生压力过不得不如此，为避免长篇累牍这里暂且不论。总而言之，内地的普通市民在医院里的人权是很低的，我们对医生也没有什么期待。对于法轮功或者死囚就更不必说了，没有人会在乎的，至于所谓的使用叶克膜活摘器官，更是无稽之谈。首先，没有人会在乎他们的生命、死活，这些人，说实话本来也是命不久矣（不是该死，而是分析当时的情况得出结论，毕竟没有人会蠢到把这些人活着放出去散布传言不是？）；其次，难道你们觉得会有医院和医生肯为将死之人使用这么昂贵的技术把所有的钱打水漂而宁可不去救治其他的能支付医疗费用的病人？他们舍得的话也不会枉死那么多的穷人。我明明知道是假的，但是一厢情愿希望是真的，因为我也想要有人情味的医生，和一个真正和谐的社会，而不是一个被和谐的社会。</p>\n<p>多党制，开放的社会舆论，初来乍到时确实觉得新鲜、渴望，可是这种开放衍生出的是什么？不顾是非，颠倒黑白，毫无原则，毫无底线，随意操弄，我突然发现，竟然真的一个地方会长期的做到这样，台湾，而这么多年过去，人们似乎也并无意识，呵，或许我也是五十步笑百步罢了。</p>\n<p>每一种行为、每一种选择都各有利弊，总在两个极端之间寻找平衡。当这个平衡慢慢倾斜，滑向任意一边，终究会引起反抗和改革。不过台湾很幸运，这么早就开始了，大陆还有的徘徊吧。我想今天心情烦闷的原因大概是我发现，柯p竞选2020的前景更偏于暗淡，不是消沉，而是各种现实显示的，原因上文已经提过不再赘述。这种人选不上总统，是注定的，改革是需要时间的，群体的思想转变需要很长时间。反过来讲，内地不是也没有这种人，一是不会或不许宣传，二是这些人多半在某处就被打压，要么无甚官职，要么尸骨无存，想要突围，这条路比台北要难得多得多了。台湾或许几代人，那么大陆可能要几十代人才能得见。</p>\n","categories":["thoughts"],"tags":["Taiwan"]},{"title":"VS Code 常用快捷键","url":"http://shifei.online/2018/12/02/vs-kb/","content":"<ol>\n<li>显示/隐藏 problem panel：Shift + Cmd + M</li>\n<li>显示/隐藏 panel： Cmd + J</li>\n<li>显示/隐藏 side bar： Cmd + B</li>\n<li>显示/隐藏 activity bar（最左）（自定义）：Cmd + K Cmd + H</li>\n</ol>\n","categories":["programing","keyboard"],"tags":["keyboard","VS Code"]},{"title":"代码规范","url":"http://shifei.online/2018/10/19/standard/","content":"<h3 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h3><ol>\n<li><p>函数签名部分有空格，函数名与小括号之间不需要空格，如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> y = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li><p>在 if、while 等控制语句后，即小括号前需要空格，参数列表和函数名之间不空格，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isJedi) &#123;</span><br><span class=\"line\">  fight();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fight</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Swooosh!'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>小括号内不加空格：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">foo</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (foo) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(foo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方括号内不加空格，逗号分隔符后加空格，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>大括号内外都加空格：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123; <span class=\"attr\">clark</span>: <span class=\"string\">'kent'</span> &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象的字面量属性，即 key-value 之间需要空格，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"string\">\"foo\"</span>: <span class=\"number\">42</span> &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>总结</strong></p>\n<ul>\n<li>需要空格：function、if 与小括号之间、大括号内外、key-value、行末</li>\n<li>不需要空格：函数名、参数与小括号之间、小括号内、方括号内、调用函数时</li>\n</ul>\n","categories":["programing"],"tags":["standard"]},{"title":"Git 总结","url":"http://shifei.online/2018/10/18/Git总结/","content":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><hr>\n<h3 id=\"错误提示解决方案\"><a href=\"#错误提示解决方案\" class=\"headerlink\" title=\"错误提示解决方案\"></a>错误提示解决方案</h3><ol>\n<li><p>提示<code>warning: CRLF will be replaced by LF in XXX . The file will have its original line endings in your working directory.</code></p>\n<p> <strong>解决方法</strong> <code>git config core.autocrlf false</code>（关闭自动转换）</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li><p>提示如下</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: <span class=\"string\">'origin'</span> does not appear to be a git repository</span><br><span class=\"line\">fatal: Could not <span class=\"built_in\">read</span> from remote repository</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>解决方法</strong> <code>git remote add origin &lt;url&gt;</code></p>\n<ol start=\"3\">\n<li><p>‘push’ 时遇到版本问题（如远程主机的版本比本地的新，又不想使用‘pull’做合并再推送时），可使用强制推送：<code>git push -f origin master</code>，该命令会覆盖远程主机版本，慎用。</p>\n</li>\n<li><p>Git 删除远程文件或文件夹，并且保留本地文件</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached filename/-r directory</span><br><span class=\"line\">git commit -m <span class=\"string\">\"remove file/directory\"</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"生僻用法\"><a href=\"#生僻用法\" class=\"headerlink\" title=\"生僻用法\"></a>生僻用法</h3><ol>\n<li>使用 <code>git add [filename] -e</code> 可以查看并修改过的内容，在使用本代码后会进入 vim 模式并显示 diff 信息，例如： <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff --git a/feature.rb b/feature.rb   <span class=\"comment\"># 比较的本件, Git 自动命名为a、b</span></span><br><span class=\"line\">index 1a271e9..4a80dda 100644  <span class=\"comment\"># 元数据，1a271e9 和 4a80dda 代表两个文件的哈希值，最后的数字代表文件模式（100644 表示普通文件，100755 表示可执行文件， 120000 表示符号链接）</span></span><br><span class=\"line\">--- a/feature.rb  <span class=\"comment\"># 文件标记</span></span><br><span class=\"line\">+++ b/feature.rb  <span class=\"comment\"># 同上</span></span><br><span class=\"line\">@@ -1 +1,3 @@  <span class=\"comment\"># 从本行起至末尾为一个改动区块，本行为区块头，来自文件 a 的标记为‘-’，来自文件 b 的标记为‘+’，意思是从第一行开始的3行代码</span></span><br><span class=\"line\">this is the class of my feature  <span class=\"comment\"># 上下文环境</span></span><br><span class=\"line\">+This change belongs to the first feature  <span class=\"comment\"># 改动，‘+’表示 b 新增加的内容</span></span><br><span class=\"line\">+This change belongs to the second feature  <span class=\"comment\"># 同上</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","categories":["programing"],"tags":["Git"]},{"title":"Nginx 简介及使用","url":"http://shifei.online/2018/07/05/nginx/","content":"<h2 id=\"LNMP\"><a href=\"#LNMP\" class=\"headerlink\" title=\"LNMP\"></a>LNMP</h2><p><strong>1.简介</strong></p>\n<p>工作中常会需要多个容器相互配合来完成某项任务，如实现一个web项目，需要web服务器、数据库服务器、负载均衡等，使用docker逐个构建则任务繁重。Compose是docker官方的开源项目，定义和运行多个docker容器的应用，能实现对docker容器集群的快速编排，定义一组相关联的容器为一个项目。</p>\n<a id=\"more\"></a>\n<p>LNMP（LEMP）即Linux + Nginx + MySQL + PHP 的服务器架构，与LAMP相比，Nginx性能更强，资源占用少，效率更高。</p>\n<p>LNMP的实现原理：</p>\n<ul>\n<li>浏览器发送http请求到服务器（Nginx），服务器响应并处理web请求，将静态资源保存在服务器</li>\n<li>PHP脚本通过接口传输协议（网关协议）php-fcgi传输给php-fpm（进程管理程序）,PHP-FPM不做处理，然后PHP-FPM调用PHP解析器进程，PHP解析器解析php脚本信息。PHP解析器进程可以启动多个，进行并发执行。</li>\n<li>将解析后的脚本返回到PHP-FPM，PHP-FPM再通过fast-cgi的形式将脚本信息传送给Nginx。</li>\n<li>服务器再通过Http response的形式传送给浏览器。浏览器再进行解析与渲染然后进行呈现。</li>\n</ul>\n<p><img src=\"https://github.com/bravist/lnmp-docker/raw/master/docker.png\" alt=\"流程图\"></p>\n<p><strong>2.使用</strong></p>\n<ul>\n<li>环境准备<br>docker</li>\n<li>docker-compose的简单配置<br>在目标文件夹内创建docker-compose.yml</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose.yml</span></span><br><span class=\"line\">version: <span class=\"string\">'3'</span></span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">    <span class=\"comment\"># Web server</span></span><br><span class=\"line\">    Nginx:</span><br><span class=\"line\">        image: nginx:latest</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">            - <span class=\"number\">23333</span>:<span class=\"number\">80</span></span><br><span class=\"line\">        depends_on:</span><br><span class=\"line\">            - php</span><br><span class=\"line\">        volumes:</span><br><span class=\"line\">            - ./images/nginx/config:/etc/nginx/conf.d:ro</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># PHP</span></span><br><span class=\"line\">    php:</span><br><span class=\"line\">        image: php:latest</span><br><span class=\"line\">        build:</span><br><span class=\"line\">            <span class=\"comment\"># Dockerfile所在的文件目录和文件名</span></span><br><span class=\"line\">            context: ./images/php</span><br><span class=\"line\">            dockerfile: Dockerfile</span><br><span class=\"line\">        volumes:</span><br><span class=\"line\">            - ./apps:/mnt/apps</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># database</span></span><br><span class=\"line\">    MySQL:</span><br><span class=\"line\">        image: mysql:latest</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">\t\t    - <span class=\"number\">3306</span>:<span class=\"number\">3306</span></span><br><span class=\"line\">        <span class=\"comment\"># 配置环境变量</span></span><br><span class=\"line\">        environment:</span><br><span class=\"line\">            RACK_ENV: development</span><br><span class=\"line\">            MYSQL_ROOT_PASSWORD: <span class=\"string\">'root'</span></span><br><span class=\"line\">            MYSQL_USER: <span class=\"string\">'root'</span></span><br><span class=\"line\">            MYSQL_PASSWORD: <span class=\"string\">'passwd'</span></span><br><span class=\"line\">        volumes:</span><br><span class=\"line\">            - ./database:/var/lib/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 便于命令工具操作项目文件</span></span><br><span class=\"line\">    console:</span><br><span class=\"line\">\t\tbuild:</span><br><span class=\"line\">\t\t    context: ~/workspace/lnmp/images/console</span><br><span class=\"line\">\t\t    dockerfile: /Users/eric/workspace/lnmp/images/php/Dockerfile</span><br><span class=\"line\">\t\ttty: true</span><br></pre></td></tr></table></figure>\n<p>在docker-compose.yml中改变Nginx映射的配置目录，在新目录下增加配置default.conf</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># default.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 虚拟主机配置</span></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen <span class=\"number\">80</span>;</span><br><span class=\"line\">    server_name localhost;<span class=\"comment\"># 域名</span></span><br><span class=\"line\">    root /mnt/apps;<span class=\"comment\"># 站点目录</span></span><br><span class=\"line\">    index index.php index.html index.htm;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        index index.php index.html;</span><br><span class=\"line\">        try_files $uri $uri/ /index.php?$query_string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\">\t    fastcgi_pass php:<span class=\"number\">9000</span>;</span><br><span class=\"line\">        fastcgi_index index.php;</span><br><span class=\"line\">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">        include fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>添加Dockerfile，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dockerfile</span></span><br><span class=\"line\">FROM php:<span class=\"number\">7.2</span>-fpm</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y pdo pdo_mysql pdo_pgsql \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install pdo \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install pdo_mysql \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install pdo_pgsql</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">        libfreetype6-dev \\</span><br><span class=\"line\">        libjpeg62-turbo-dev \\</span><br><span class=\"line\">        libmcrypt-dev \\</span><br><span class=\"line\">        libpng-dev \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install -j$(nproc) iconv mcrypt \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-configure gd --<span class=\"keyword\">with</span>-freetype-dir=/usr/include/ --<span class=\"keyword\">with</span>-jpeg-dir=/usr/include/ \\</span><br><span class=\"line\">    &amp;&amp; docker-php-ext-install -j$(nproc) gd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 composer</span></span><br><span class=\"line\">RUN curl -o composer.phar https://getcomposer.org/download/<span class=\"number\">1.4</span><span class=\"number\">.1</span>/composer.phar \\</span><br><span class=\"line\">    &amp;&amp; chmod +x composer.phar</span><br></pre></td></tr></table></figure>\n<p><strong>3.安装及设置</strong></p>\n<ul>\n<li><p>创建容器<br>在Dockerfile的目录中运行命令<code>docker-compose up --build -d</code>,运行后docker会有四个容器运行。原目录下有三个子目录：apps用于存放项目文件，database是mySQL的数据库映射，images存放Dockerfile等配置文件。</p>\n</li>\n<li><p>测试</p>\n<ul>\n<li><p>Nginx与PHP</p>\n<p> 可在项目中的apps目录下添加test.php（如下）测试环境，容器运行后打开127.0.0.1:23333/test.php，如成功则显示当前安装的PHP版本和所有配置信息。</p>\n</li>\n<li><p>PHP与mySQL</p>\n<p> 在同上位置添加test-mysql.php，内容如下：</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    phpinfo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test-mysql.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$dbms=<span class=\"string\">'mysql'</span>;   <span class=\"comment\">//数据库类型</span></span><br><span class=\"line\">$host=<span class=\"string\">'localhost'</span>; <span class=\"comment\">//数据库主机名</span></span><br><span class=\"line\">$dbName=<span class=\"string\">'mysql'</span>;    <span class=\"comment\">//使用的数据库</span></span><br><span class=\"line\">$user=<span class=\"string\">'sf'</span>;      <span class=\"comment\">//数据库连接用户名</span></span><br><span class=\"line\">$pass=<span class=\"string\">'passwd'</span>;          <span class=\"comment\">//对应的密码</span></span><br><span class=\"line\">$dsn=<span class=\"string\">\"$dbms:host=$host;dbname=$dbName\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    $dbh = <span class=\"keyword\">new</span> PDO($dsn, $user, $pass); <span class=\"comment\">//初始化一个PDO对象</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"连接成功&lt;br/&gt;\"</span>;</span><br><span class=\"line\">    $dbh = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (PDOException $e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span> (<span class=\"string\">\"Error!: \"</span> . $e-&gt;getMessage() . <span class=\"string\">\"&lt;br/&gt;\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如需长链接如下</span></span><br><span class=\"line\"><span class=\"comment\">// $db = new PDO($dsn, $user, $pass, array(PDO::ATTR_PERSISTENT =&gt; true));</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除容器<br> 无需该环境时即可销毁容器，运行<code>docker-compose down</code>。</li>\n</ul>\n<p><strong>4.注意（坑）</strong></p>\n<ul>\n<li>yaml不允许tab替换空格</li>\n<li>dockerfile构建的路径为绝对路径</li>\n<li>php5以上版本已经废除mysql_connect()方法</li>\n</ul>\n<h2 id=\"使用Nginx\"><a href=\"#使用Nginx\" class=\"headerlink\" title=\"使用Nginx\"></a>使用Nginx</h2><p><strong>1.简介</strong></p>\n<p>Nginx是异步框架的Web服务器，同时可用作反向代理、负载平衡器和HTTP缓存。</p>\n<p>Nginx是面向性能设计的HTTP服务器，相较于Apache、lighttpd具有占有内存少，稳定性高等优势。而且在实际工作中，Nginx可以支持二万到四万个并行链接。</p>\n<p><strong>2.docker与Nginx的配置</strong></p>\n<ul>\n<li>安装：通过<code>docker run -p 127.0.0.1:3423:80 --name mynginx -d nginx</code>下载并运行Nginx容器，如成功安装运行，打开127.0.0.1:3423即可看见Nginx欢迎页。</li>\n<li>停止：<code>docker container stop mynginx</code>，在安装时设置了删除参数，容器终止后容器文件会自动删除</li>\n<li>修改映射网页目录：新建并如下目录，新建index.html，将子目录映射到容器的目录，代码如下，然后打开127.0.0.1:9384，看到Hello World。（IP写成127.0.0.1:[四位数字]，否则容易报错）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir nginx-docker-demo</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nginx-docker-demo</span><br><span class=\"line\">$ mkdir html</span><br><span class=\"line\">$ emacs index.html</span><br><span class=\"line\">$ &lt;h1&gt;Hello World&lt;/h1&gt;</span><br><span class=\"line\">$ docker run -d -p 127.0.0.1:9384:80 --rm --name mynginx --volume <span class=\"variable\">$PWD</span>/html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure>\n<ul>\n<li>拷贝配置：将容器里的Nginx配置文件复制到本地</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container cp mynginx:/etc/nginx .</span><br></pre></td></tr></table></figure>\n<ul>\n<li>映射配置目录<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run  --rm --name mynginx --volume <span class=\"variable\">$PWD</span>/html:/usr/share/nginx/html --volume <span class=\"variable\">$PWD</span>/conf.d:/etc/nginx -p 127.0.0.1:4023:80 -d nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>3.反向代理</strong></p>\n<ul>\n<li><p>概念</p>\n<p>反向代理方式是指用代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n<p>例如，用户访问 <a href=\"http://www.example.com/readme\" target=\"_blank\" rel=\"noopener\">http://www.example.com/readme</a>，但是 <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">http://www.example.com</a> 上并不存在 readme 页面，它是偷偷从另外一台服务器上取回来，然后作为自己的内容返回给用户。但是用户并不知情这个过程。对用户来说，就像是直接从 <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">http://www.example.com</a> 获取 readme 页面一样。这里的 <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">http://www.example.com</a> 这个域名对应的服务器就设置了反向代理功能。</p>\n<p>反向代理服务器，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。如下图所示：</p>\n<p><img src=\"https://moonbingbing.gitbooks.io/openresty-best-practices/images/proxy.png\" alt=\"反向代理\"></p>\n</li>\n<li><p>应用</p>\n<p>反向代理的典型用途是将防火墙后面的服务器提供给 Internet 用户访问，加强安全防护。反向代理还可以为后端的多台服务器提供负载均衡，或为后端较慢的服务器提供缓 服务。另外，反向代理还可以启用高级 URL 策略和管理技术，从而使处于不同 web 服务器系统的 web 页面同时存在于同一个 URL 空间下。</p>\n<p>本地访问 <a href=\"http://localhost/deno\" target=\"_blank\" rel=\"noopener\">http://localhost/deno</a> 时服务器进行反向代理，从 <a href=\"https://github.com/ry/deno\" target=\"_blank\" rel=\"noopener\">https://github.com/ry/deno</a> 获取页面内容，添加nginx.conf到Nginx配置目录，生效后运行服务器打开 <a href=\"http://localhost/deno\" target=\"_blank\" rel=\"noopener\">http://localhost/deno</a> 会打开 <a href=\"https://github.com/ry/deno\" target=\"_blank\" rel=\"noopener\">https://github.com/ry/deno</a>，代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_process <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pid logs/nginx.pid;</span><br><span class=\"line\">error_log logs/error.log warn;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections <span class=\"number\">3000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 反向代理</span></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass       https://github.com;</span><br><span class=\"line\">            proxy_redirect   off;</span><br><span class=\"line\">            proxy_set_header Host            $host;</span><br><span class=\"line\">            proxy_set_header X-Real-IP       $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \tlocation /deno &#123;</span><br><span class=\"line\">        \tproxy_set_header X-Real-IP       $remote_addr;</span><br><span class=\"line\">        \tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        \tproxy_pass       https://github.com/ry/deno;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>正向代理</p>\n<p>正向代理好比一个跳板，当用户访问不了某网站时，能够访问一个代理服务器，通过连接代理服务器，告诉他需要的访问内容，代理服务器拉取给用户，翻墙工具、游戏代理都是正向代理。</p>\n</li>\n</ul>\n<p><strong>4.负载均衡</strong></p>\n<p>负载均衡是一种计算机网络技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁盘驱动器或其他资源中分配负载，以达到最佳化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。</p>\n<p>使用带有负载均衡的多个服务器组件，取代单一的组件，可以通过冗余提高可靠性。负载均衡服务通常是由专用软体和硬件来完成。</p>\n<p>负载均衡最重要的一个应用是利用多台服务器提供单一服务，这种方案有时也称之为服务器农场。通常，负载均衡主要应用于 Web 网站，大型的 Internet Relay Chat 网络，高流量的文件下载网站，NNTP 服务和 DNS 服务。现在负载均衡器也开始支持数据库服务，称之为数据库负载均衡器。</p>\n<p>对于互联网服务，负载均衡器通常是一个软体程序，这个程序侦听一个外部端口，互联网用户可以通过这个端口来访问服务，而作为负载均衡器的软体会将用户的请求转发给后台内网服务器，内网服务器将请求的响应返回给负载均衡器，负载均衡器再将响应发送到用户，这样就向互联网用户隐藏了内网结构，阻止了用户直接访问后台（内网）服务器，使得服务器更加安全，可以阻止对核心网络栈和运行在其它端口服务的攻击。</p>\n<p>当所有后台服务器出现故障时，有些负载均衡器会提供一些特殊的功能来处理这种情况。例如转发请求到一个备用的负载均衡器、显示一条关于服务中断的消息等。负载均衡器使得 IT 团队可以显著提高容错能力。它可以自动提供大量的容量以处理任何应用程序流量的增加或减少。</p>\n<p>在 Nginx 中，HTTP Upstream 模块负责负载均衡，这个模块通过一个简单的调度算法来实现客户端 IP 到后端服务器的负载均衡。在如下的设定中，通过 upstream 指令指定了一个负载均衡器的名称 test.net。这个名称可以任意指定，在后面需要用到的地方直接调用即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test.net&#123;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\">    server <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.13</span>:<span class=\"number\">80</span>;</span><br><span class=\"line\">    server <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.14</span>:<span class=\"number\">80</span>  down;</span><br><span class=\"line\">    server <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.15</span>:<span class=\"number\">8009</span>  max_fails=<span class=\"number\">3</span>  fail_timeout=<span class=\"number\">20</span>s;</span><br><span class=\"line\">    server <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.16</span>:<span class=\"number\">8080</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass  http:<span class=\"comment\">//test.net;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Nginx配置负载均衡</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream webservers &#123;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\">    server <span class=\"number\">192.168</span><span class=\"number\">.18</span><span class=\"number\">.201</span> weight=<span class=\"number\">1</span> max_fails=<span class=\"number\">2</span> fail_timeout=<span class=\"number\">2</span>;</span><br><span class=\"line\">    server <span class=\"number\">192.168</span><span class=\"number\">.18</span><span class=\"number\">.202</span> weight=<span class=\"number\">1</span> max_fails=<span class=\"number\">2</span> fail_timeout=<span class=\"number\">2</span>;</span><br><span class=\"line\">    server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8080</span> backup;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       <span class=\"number\">80</span>;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass      http:<span class=\"comment\">//webservers;</span></span><br><span class=\"line\">        proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重新加载配置文件后，访问该地址时发现上述两个IP是交替出现的，达到负载均衡效果</li>\n<li>利用max_fails、fail_timeout参数控制异常情况</li>\n<li>当所有服务器都停止工作时启动备份服务器</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen <span class=\"number\">8080</span>;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    root /data/www/errorpage;</span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># cat index.html</span></span><br><span class=\"line\">&lt;h1&gt;Sorry......&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当算法为ip_hash时，负载均衡调度的状态不能有backup</li>\n</ul>\n<h1 id=\"Supervisor\"><a href=\"#Supervisor\" class=\"headerlink\" title=\"Supervisor\"></a>Supervisor</h1>","categories":["programing"],"tags":["nginx","lnmp"]},{"title":"iTerm2 常用命令","url":"http://shifei.online/2018/07/05/iTerm2-kb/","content":"<ol>\n<li><p>自动补全命令： <code>Cmd-Shift-;</code></p>\n</li>\n<li><p>显示输入历史： <code>Cmd-Shif-h</code></p>\n</li>\n<li><p>显示所有窗口： <code>Cmd-Option-e</code></p>\n</li>\n<li><p>新建Tab：<code>Cmd-T</code></p>\n</li>\n<li><p>切换Tab： <code>Cmd-左/右</code></p>\n</li>\n</ol>\n","categories":["programing","keyboard"],"tags":["keyboard","iTerm2"]},{"title":"Git 常用命令","url":"http://shifei.online/2018/07/05/Git-kb/","content":"<ol>\n<li>常规上传步骤<ol>\n<li>建立本地仓库 <code>git init</code></li>\n<li>添加文件到暂存区： <code>git add [filename]</code></li>\n<li>暂存区文件提交到本地仓库： <code>git commit -m &#39;xxx&#39;</code> </li>\n<li>关联本地仓库至GitHub仓库：<code>git remote add origin [url]</code></li>\n<li>上传本地仓库文件至GitHub远程仓库:  <code>git push -u origin master</code> </li>\n<li>再更改代码上传至远程仓库使用：<code>git push</code></li>\n</ol>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li><p>分支相关</p>\n<ol>\n<li>新建并切换到本地分支： <code>git checkout -b [branch]</code> （相当于 <code>git branch [branch]</code> + <code>git checkout [branch]</code>）</li>\n<li>添加文件： <code>git add .</code></li>\n<li>提交到本地： <code>git commit -m &#39;xxx&#39;</code></li>\n<li>关联并上传至远程仓库分支： <code>git push --set-upstream origin [branch]</code></li>\n<li>常用命令：<ul>\n<li>查看本地所有分支： <code>git branch -r</code> </li>\n<li>查看所有分支： <code>git branch -a</code></li>\n<li>查看远程仓库： <code>git remote</code></li>\n<li>删除分枝： <code>git branch -d [branch]</code></li>\n<li>切换远程分支： <code>git checkout [branch]</code></li>\n<li>查看远程仓库的信息： <code>git remote show [remote]</code></li>\n<li>强制上传到远程： <code>git push -f origin [branch]</code></li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>查看本地仓库<strong>状态</strong>： <code>git status</code></p>\n</li>\n<li>查看已有的<strong>配置</strong>信息： <code>git config --list</code></li>\n<li>设置默认文本编辑器： <code>git config --global core.editor [name]</code></li>\n<li><strong>删除</strong>git本地仓库： <code>rm -rf .git</code></li>\n<li>查询是否使用<strong>代理</strong>： <code>git config --global http.proxy</code></li>\n<li>取消代理： <code>git config --global --unset http.proxy</code></li>\n<li><strong>回滚</strong>最近一次操作： <code>git reset --soft HEAD^</code></li>\n<li><strong>撤销</strong>本地所有<strong>修改</strong>： <code>git checkout .</code></li>\n<li><strong>撤销上一次提交</strong>的所有内容： <code>git reset HEAD [file-name/为空则为所有文件]</code></li>\n<li>查看自己 GitHub 并\b修改账号信息： <code>curl -i -u username:token https://api.github.com/user</code> </li>\n</ol>\n","categories":["programing","keyboard"],"tags":["Git","keyboard"]},{"title":"Docker 常用命令","url":"http://shifei.online/2018/07/05/docker-kb/","content":"<ol>\n<li><p>查看所有镜像： <code>docker image ls</code></p>\n</li>\n<li><p>查看所有镜像（包括ID）： <code>docker images -a</code></p>\n</li>\n<li><p>删除镜像（通过ID）： <code>docker rmi [id]</code></p>\n</li>\n<li><p>进入容器： <code>docker exec -it [container-id] bash</code></p>\n</li>\n<li><p>停止运行容器： <code>docker stop [container-id]</code></p>\n</li>\n<li><p>查看运行中的容器： <code>docker ps</code></p>\n</li>\n<li><p>查看所有容器： <code>docker ps -a</code></p>\n</li>\n<li><p>删除容器： <code>docker rm [container id]</code></p>\n</li>\n<li><p>查看某容器的信息（IP等）： <code>docker inspect [container-name]</code></p>\n</li>\n</ol>\n","categories":["programing","keyboard"],"tags":["keyboard","Docker"]},{"title":"Emacs 快捷键","url":"http://shifei.online/2018/07/05/emacs-kb/","content":"<h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><ul>\n<li>保存文件：<code>C-x C-s</code></li>\n<li>退出 emacs：<code>C-x C-c</code></li>\n<li>另存为：<code>C-x C-w</code></li>\n<li>进入dired： <code>C-x C-f</code></li>\n<li>退出dired： <code>C-g</code></li>\n<li>dired中重命名或移动文件： <code>R</code></li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"编辑文本\"><a href=\"#编辑文本\" class=\"headerlink\" title=\"编辑文本\"></a>编辑文本</h2><h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><ul>\n<li>删除行：<code>C-a C-k</code></li>\n<li>下一屏：<code>C-v</code></li>\n<li>上一屏：<code>M-v</code> </li>\n<li>从插入点向回（前面）删除到前面单词的开始处：<code>M-del</code> </li>\n<li>从插入点向前删除到后面单词的开始处： <code>M-d</code></li>\n</ul>\n<h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><ul>\n<li>首次增加字体大小： <code>C-x C-+</code> ，以后 <code>+</code></li>\n<li>首次缩小字体： <code>C-x C- -</code> ，以后 <code>-</code></li>\n</ul>\n<h3 id=\"光标\"><a href=\"#光标\" class=\"headerlink\" title=\"光标\"></a>光标</h3><ul>\n<li>移动到本行行首： <code>C-a</code></li>\n<li>移动到本行行尾： <code>C-e</code> </li>\n<li>移动到句首： <code>M-a</code>，再按移动到上个句首</li>\n</ul>\n<h3 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h3><ul>\n<li>撤销： <code>C- -</code> 或 <code>C- shift加-</code> 或 <code>C-/</code> 或<code>C-x u</code></li>\n</ul>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li>注释选中块：<code>C-x r t</code></li>\n<li>反注释选中块：<code>C-x r k</code></li>\n</ul>\n<hr>\n<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><ul>\n<li>搜索： <code>C-s</code></li>\n</ul>\n<hr>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>在终端内打开 emacs： <code>emacs -nw</code>（通用）</li>\n</ul>\n<hr>\n<h2 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h2><ul>\n<li>进入输入模式： <code>i</code></li>\n<li>进入删除模式： <code>x</code></li>\n<li>退出当前模式：<code>esc</code></li>\n<li>保存并退出：<code>:wq</code></li>\n<li>直接退出： <code>:q</code></li>\n<li>强制退出： <code>:q!</code></li>\n</ul>\n","categories":["programing","keyboard"],"tags":["keyboard","emacs"]},{"title":"Mac 快捷键","url":"http://shifei.online/2018/07/05/Mac-kb/","content":"<h4 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h4><ol>\n<li>查找 <code>Cmd-F</code></li>\n<li>全屏 <code>Ctrl-Cmd-F</code></li>\n<li>强制退出 <code>Opt-Cmd-Esc</code></li>\n<li>强制Mac重启 <code>Ctrl-Cmd-电源按钮</code> （不适用multi-touch bar）</li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"Safari\"><a href=\"#Safari\" class=\"headerlink\" title=\"Safari\"></a>Safari</h4><ol>\n<li>使下一标签页成为活跃标签页 <code>Ctrl-Tab</code></li>\n<li>使上一标签页成为活跃标签页 <code>Ctrl-Shift-Tab</code></li>\n</ol>\n<h4 id=\"截屏\"><a href=\"#截屏\" class=\"headerlink\" title=\"截屏\"></a>截屏</h4><ol>\n<li>部分 <code>Shift-Cmd-4</code></li>\n<li>全屏 <code>Shift-Cmd-3</code></li>\n<li>选择区域 <code>Shift-Cmd-A</code></li>\n</ol>\n<h4 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h4><ol>\n<li>粗体／关闭粗体 <code>Cmd-B</code> （斜体I、下划线U）</li>\n<li>拷贝样式 <code>Opt-Cmd-C</code></li>\n<li>粘贴样式 <code>Opt-Cmd-V</code></li>\n<li>粘贴并匹配样式 <code>Opt-Shift-Cmd-V</code></li>\n<li>存储为 <code>Shift-Cmd-S</code></li>\n<li>选中行 <code>Shift-Cmd-左（行尾）／右（行首）</code></li>\n<li>光标向前/后跳一个词 <code>Opt - 左/右</code></li>\n</ol>\n<h4 id=\"Finder\"><a href=\"#Finder\" class=\"headerlink\" title=\"Finder\"></a>Finder</h4><ol>\n<li>打开“电脑”窗口 <code>Shift-Cmd-C</code></li>\n<li>打开“前往文件夹”窗口 <code>Shift-Cmd-G</code></li>\n<li>隐藏或显示Finder窗口中的路径栏 <code>Opt-Cmd-P</code></li>\n<li>打开所选项 <code>Cmd-下箭头</code></li>\n</ol>\n<h4 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h4><ol>\n<li>开启安全性与隐私中安装来自任何来源的软件： <code>sudo spctl --master-disable</code></li>\n<li>在finder内显示所有隐藏文件和文件夹： <code>defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder</code> （隐藏时设为false）</li>\n</ol>\n","categories":["programing","keyboard"],"tags":["keyboard","Mac"]},{"title":"Pro Git - notes","url":"http://shifei.online/2018/06/10/pro git/","content":"<h1 id=\"一、Git-起步\"><a href=\"#一、Git-起步\" class=\"headerlink\" title=\"一、Git 起步\"></a>一、Git 起步</h1><h2 id=\"1-版本控制\"><a href=\"#1-版本控制\" class=\"headerlink\" title=\"1. 版本控制\"></a>1. 版本控制</h2><p>版本控制是记录若干文件内容变化，以便于将来查阅特定版本修订情况的系统。不仅限于软件代码文本，任何类型的文件都可以进行版本控制，比如图片或页面布局文件。</p>\n<p>版本控制系统分为三类：<br><a id=\"more\"></a></p>\n<ul>\n<li>第一类为本地版本控制，最流行的是rcs系统，至今仍在使用。工作原理是保存并管理文件补丁（记录修订前后内容变化的特定格式的文本文件），rcs根据修订的补丁计算各个版本的文件内容。</li>\n<li>集中化的版本控制（CVCS）。使用不同系统进行协同工作的开发者通过客户端连接到cvcs的集中管理服务器，取文件或提交更新。</li>\n<li>分布式版本控制系统（DVCS）。客户端可将原始代码仓库镜像下载，如服务器发生故障可通过本地仓库恢复。每次的提取相当于对代码仓库的完整备份，并且增加不同远端仓库的交互功能。</li>\n</ul>\n<h2 id=\"2-Git-特点\"><a href=\"#2-Git-特点\" class=\"headerlink\" title=\"2. Git 特点\"></a>2. Git 特点</h2><ul>\n<li>关注文件数据的整体变化，而不限于文件内容差异。</li>\n<li>几乎所有操作都可以本地执行</li>\n<li>时刻保持数据完整性（校验、计算、标识）</li>\n<li>大部分操作在添加数据</li>\n</ul>\n<h2 id=\"3-Git-工作流程\"><a href=\"#3-Git-工作流程\" class=\"headerlink\" title=\"3. Git 工作流程\"></a>3. Git 工作流程</h2><p>Git内部的文件存在三种状态：committed（已修改）、modified（已提交）、staged（已暂存）。已提交表示该文件已保存在本地数据库；已修改表示修改了某文件，但未提交保存（从暂存区到仓库）；已暂存表示把已修改的文件放在下次提交时要保存的清单中。</p>\n<p>工作流程：</p>\n<ul>\n<li>在工作目录中修改文件</li>\n<li>对修改文件做快照，并保存到暂存区</li>\n<li>提交更新，将暂存区的文件快照转存到 git 目录</li>\n</ul>\n<h2 id=\"4-Git-配置\"><a href=\"#4-Git-配置\" class=\"headerlink\" title=\"4. Git 配置\"></a>4. Git 配置</h2><ul>\n<li><p>用户信息</p>\n<p> 当前用户主目录下的用户配置：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">'[your-name]'</span></span><br><span class=\"line\">$ git config --global user.email [your-email]</span><br></pre></td></tr></table></figure>\n<p>如想在特定项目中使用其他名字或邮箱，配置时去掉 –global 即可。</p>\n</li>\n<li><p>设置默认编辑器 <code>git config --global core.editor [editor]</code></p>\n</li>\n<li><p>设置差异分析工具，<code>git config --global merge.tool [tool-name]</code>。</p>\n<p>常见设置工具有kdiff3、tkdiff、meld、xxdiff、emerge、vimdiff、gvimdiff、ecmerge、opendiff等</p>\n</li>\n<li><p>查看配置信息为 <code>git config --list</code>。</p>\n<p>  查看指定环境变量的设定：<code>git config [variable-name]</code>。</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"二、Git-基础\"><a href=\"#二、Git-基础\" class=\"headerlink\" title=\"二、Git 基础\"></a>二、Git 基础</h1><h2 id=\"1-取得-Git-仓库\"><a href=\"#1-取得-Git-仓库\" class=\"headerlink\" title=\"1. 取得 Git 仓库\"></a>1. 取得 Git 仓库</h2><ul>\n<li><p>从当前目录初始化</p>\n<p>进入当前目录，执行 <code>git init</code> , 如果当前目录下有几个文件想要纳入版本控制, 需要先告诉 Git 开始跟踪：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [file-name]</span><br><span class=\"line\">$ git commit -m <span class=\"string\">'initial project version'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从现有仓库克隆</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]</span><br></pre></td></tr></table></figure>\n<p>该命令会在当前目录下创建一个同名目录并拉取所有数据，取出最新版本。如需自定义项目目录名称：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url] [folder-name]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-记录每次更新\"><a href=\"#2-记录每次更新\" class=\"headerlink\" title=\"2. 记录每次更新\"></a>2. 记录每次更新</h2><p>首先明确：工作目录下的所有文件只有两种状态：已跟踪或未跟踪。</p>\n<p>已跟踪的文件状态可能有如下几种：未更新、已修改、放入暂存区。未跟踪文件没有任何记录。</p>\n<ul>\n<li><p>查看文件状态使用命令 <code>git status</code>， 如果原文件夹内没有其他文件，会显示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit (working directory clean)</span><br></pre></td></tr></table></figure>\n<p>如存在其他文件则提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">  jsconfig.json</span><br><span class=\"line\">  </span><br><span class=\"line\">nothing added to commit but untracked files present (use <span class=\"string\">\"git add\"</span> to track)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>跟踪新文件README</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add README</span><br></pre></td></tr></table></figure>\n<p>再查看文件状态时提示README已跟踪并暂存：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">  new file:   README</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>暂存已修改文件</p>\n<p> 当修改之前处于已跟踪状态的文件homePage.js后，再查看文件状态会提示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">  new file:   README</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working <span class=\"comment\"># directory)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  modified:   assets/Script/homePage.js</span><br></pre></td></tr></table></figure>\n<p>homePage.js 的内容变化但未放入暂存区，此时运行 <code>git add</code> 更新内容，或运行 <code>git checkout</code> 无视变化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add homePage.js</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</span><br><span class=\"line\"> </span><br><span class=\"line\">  new file:   README</span><br><span class=\"line\">  modified:   assets/Script/homePage.js</span><br></pre></td></tr></table></figure>\n<p>这时如果修改homePage.js，\b再运行 <code>git status</code>，发现出现了两个版本的homePage.js：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</span><br><span class=\"line\"> </span><br><span class=\"line\">  new file:   README</span><br><span class=\"line\">  modified:   assets/Script/homePage.js</span><br><span class=\"line\"> </span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working <span class=\"comment\"># directory)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  modified:   assets/Script/homePage.js</span><br></pre></td></tr></table></figure>\n<p>如果这时提交，提交的实际上是修改前的版本，暂存区暂存的是最初执行 <code>git add</code> 时的版本，所以此处需要<strong>重新执行一次 <code>git add</code> 存储最新版</strong>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add assets/Script/homePage.js</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</span><br><span class=\"line\"> </span><br><span class=\"line\">  new file:   README</span><br><span class=\"line\">  modified:   assets/Script/homePage.js</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>忽略文件</p>\n<p>有些文件无需纳入版本管理，也不希望出现再未跟踪文件列表，可以将这些文件添加到 .gitignore 中。</p>\n<p>文件 .gitignore 的格式规范如下：</p>\n<ul>\n<li>所有空行或以 # 开头的\b行（注释）都会被Git忽略</li>\n<li>可以使用标准 glob 模式（shell 使用的简化正则表达式）匹配</li>\n<li>如要忽略目录则在后面添加\b反斜杠 /</li>\n<li>反向忽略可在模式前加惊叹号 ! 取反</li>\n</ul>\n<p>那么我们现在添加 .gitignore 文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.json           # 忽略整个目录下所有以 .json 结尾的文件</span><br><span class=\"line\">!jsconfig.json   # 但jsconfig.json除外</span><br><span class=\"line\">/local           # 忽略主目录下的local文件（或文件夹）</span><br><span class=\"line\">library/         # 忽略library文件夹</span><br><span class=\"line\">assets/*.meta    # 忽略assets\b直属子目录下的所有 .meta 文件</span><br></pre></td></tr></table></figure>\n<p>此时再查看代码状态为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</span><br><span class=\"line\"> </span><br><span class=\"line\">  new file:   README</span><br><span class=\"line\">  modified:   assets/Script/homePage.js</span><br><span class=\"line\"> </span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</span><br><span class=\"line\"> </span><br><span class=\"line\">  .gitignore</span><br><span class=\"line\">  creator.d.ts</span><br><span class=\"line\">  jsconfig.json</span><br><span class=\"line\">  myKingClient/</span><br><span class=\"line\">  temp/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看已暂存和未暂存的更新</p>\n<p> <code>git status</code> 命令列出修改过的文件，但如过想查看具体的修改内容，使用 <code>git diff</code> 命令，可以查看已暂存和未暂存的更新。</p>\n<p>此时修改 Refresh.js 文件，不进行暂存，查看状态如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working <span class=\"comment\"># directory)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    modified:   assets/Script/Refresh.ts</span><br></pre></td></tr></table></figure>\n<p>查看<strong>未暂存文件</strong>的更新，执行 <code>git diff</code>（如果更新后全部暂存则再使用这条命令看不到文件改动）。</p>\n<p>查看<strong>已暂存</strong>的文件与之前快照的差异，使用 <code>git diff --cached</code> 或 <code>git diff --staged</code>。</p>\n<p>此时先暂存 Refresh.js 再进行编辑，运行 <code>git status</code> 会看到两个版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git st</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">  modified:   assets/Script/Refresh.ts</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working <span class=\"comment\"># directory)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  modified:   assets/Script/Refresh.ts</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交更新</p>\n<p>现在把 Refresh.js 提交到暂存区，先用 <code>git status</code> 查看是否正确再进行提交，即执行 <code>git commit</code>, 会启动编辑器编辑提交说明，显示如下信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the commit message <span class=\"keyword\">for</span> your changes. Lines starting with <span class=\"string\">'#'</span> will be ignored, and an empty message aborts the commit.</span><br><span class=\"line\"></span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  new file:   README</span><br><span class=\"line\">  modified:   assets/Script/Refresh.ts</span><br></pre></td></tr></table></figure>\n<p>默认信息中包括运行 <code>git status</code> 的输出，也可以使用 <code>git commit -v</code> 可将所有变化显示到默认信息中。</p>\n<p>退出编辑器时Git会提交你添加的说明和更新，忽略注释。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[master 4a19a17] first commit <span class=\"keyword\">for</span> <span class=\"built_in\">test</span></span><br><span class=\"line\">3 files changed, 10 insertions(+), 20 deletions(-)</span><br><span class=\"line\">create mode 100644 README</span><br></pre></td></tr></table></figure>\n<p>使用 <code>git commit -m [commit]</code> 可以不通过编辑器直接提交说明。</p>\n<p>提交后显示提交的分支，SHA-1 校验和内容，改动的文件\b个数和添加、删除的行数。</p>\n</li>\n<li><p>跳过暂存区</p>\n<p>为简化流程，Git提供跳过暂存区的方式，\b提交时自动将所有已跟踪的文件暂存一并提交，即在命令中添加 <code>-a</code>， 可简化命令为 <code>git commit -am &#39;an easy way&#39;</code></p>\n</li>\n<li><p>移除文件</p>\n<ul>\n<li><p>从暂存区中移除文件，可使用 <code>git rm</code> 完成，<strong>执行后会一同删除工作目录中的文件</strong>。</p>\n</li>\n<li><p>如果只是在工作目录中删除（\b执行 <code>rm</code>），\b查看状态时会在未暂存中看到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm jsconfig.json</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add/rm &lt;file&gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working <span class=\"comment\"># directory)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  deleted:    jsconfig.json</span><br></pre></td></tr></table></figure>\n<p>接着再运行 <code>git rm</code>\b，显示删除暂存区内的 jsconfig.json：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm jsconfig.json</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">  deleted:    jsconfig.json</span><br></pre></td></tr></table></figure>\n<p>如需删除之前修改过且放入暂存区的文件，必须使用强制删除\b <code>-f</code>，防止误删文件。</p>\n</li>\n<li><p>只删除\b Git 仓库中的文件，保留工作目录中的文件，即只从跟踪清单中删除，使用 <code>git rm --cached [file-name]</code>。</p>\n<p>\b可以列出文件或文件夹的\b名字，或者glob模式（使用 * 时需要在其前面加反斜杠 \\，否则不会递归匹配）</p>\n</li>\n</ul>\n</li>\n<li><p>移动文件的命令为 <code>git mv [file-from] [file-to]</code>，其中[file-to] 可以传递新文件名或目录。</p>\n</li>\n</ul>\n<h2 id=\"3-查看提交历史\"><a href=\"#3-查看提交历史\" class=\"headerlink\" title=\"3. 查看提交历史\"></a>3. 查看提交历史</h2><p>使用 <code>git log</code> 不设置参数时，默认按提交时间列出更新，最近的在最上面，包括 SHA-1 校验、作者名称、作者的邮箱、提交时间和提交说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit 05f64a0746978bcba0219a04196545052ccb4f1d</span><br><span class=\"line\">Author: shifei &lt;wenjzhuo@icloud.com&gt;</span><br><span class=\"line\">Date:   Mon Jun 11 00:17:53 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    initial project version</span><br></pre></td></tr></table></figure>\n<p><code>git log</code> 常见使用如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> -p  <span class=\"comment\"># 显示每次提交的内容差异</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -p -2  <span class=\"comment\"># 显示\b最近两次的提交的内容差异</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span>  <span class=\"comment\"># 显示每次更新的简要信息，如改动文件、增减行数</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=[oneline/short/full/fuller]  <span class=\"comment\"># 通过几种不同方式显示每次改动</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=format:<span class=\"string\">'%h - %an, %ar : %s'</span>  <span class=\"comment\"># 定制显示格式</span></span><br></pre></td></tr></table></figure>\n<p><code>git log</code> 支持的参数</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-p</td>\n<td>按补丁格式显示每个更新之间的差异</td>\n</tr>\n<tr>\n<td>–shortstat</td>\n<td>只显示 –stat中最后的行数及增删统计</td>\n</tr>\n<tr>\n<td>–name-only</td>\n<td>仅再提交信息后显示已修改的文件清单</td>\n</tr>\n<tr>\n<td>–abbrev-date</td>\n<td>使用较短的相对时间显示</td>\n</tr>\n<tr>\n<td>–graph</td>\n<td>显示 ASCII 图形表示的分支\b合并历史</td>\n</tr>\n<tr>\n<td>–pretty</td>\n<td>使用其他格式显示历史提交信息</td>\n</tr>\n</tbody>\n</table>\n<p>其中 format 的参数：</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%H</td>\n<td>提交对象的完整哈希值</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>提交对象的简短哈希值</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>树对象的完整哈希值</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>树对象的简短哈希值</td>\n</tr>\n<tr>\n<td>%P</td>\n<td>父对象的简短哈希值</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>扶对象的简短哈希值</td>\n</tr>\n<tr>\n<td>%an</td>\n<td>作者名字</td>\n</tr>\n<tr>\n<td>%ae</td>\n<td>作者电子邮件地址</td>\n</tr>\n<tr>\n<td>%ad</td>\n<td>作者修订日期</td>\n</tr>\n<tr>\n<td>%ar</td>\n<td>作者修订日期，按多久以前的方式显示</td>\n</tr>\n<tr>\n<td>%cn</td>\n<td>提交者名字</td>\n</tr>\n<tr>\n<td>%ce</td>\n<td>提交者电子邮件</td>\n</tr>\n<tr>\n<td>%cd</td>\n<td>提交日期</td>\n</tr>\n<tr>\n<td>%cr</td>\n<td>提交日期，按多久以前的方式显示</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>提交说明</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>限制输出长度</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-n</td>\n<td>仅显示最近的 n 条提交</td>\n</tr>\n<tr>\n<td>–since, –after</td>\n<td>仅显示指定时间之后的提交</td>\n</tr>\n<tr>\n<td>–until, –before</td>\n<td>仅显示指定时间之前的提交</td>\n</tr>\n<tr>\n<td>–author</td>\n<td>仅显示指定作者相关的提交</td>\n</tr>\n<tr>\n<td>–committer</td>\n<td>仅显示指定提交者的提交</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>显示最近的n条改动：<code>git log -n</code></p>\n</li>\n<li><p>按操作时间限制：<code>git log --since=1.year</code>，可以使用量词为单位，也可以使用诸如 “2013-02-21” 的写法。</p>\n</li>\n<li><p>使用图形化工具gitk查阅历史</p>\n</li>\n</ul>\n<h2 id=\"4-撤销操作\"><a href=\"#4-撤销操作\" class=\"headerlink\" title=\"4. 撤销操作\"></a>4. 撤销操作</h2><ul>\n<li><p>修改最后一次<em>提交</em></p>\n<p>执行 <code>git commit --amend</code> 命令可重新提交暂存区快照，如\b无需改动直接保存退出即可；如需改动，修改后提交即可覆盖之前的提交说明。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">'initial commit'</span></span><br><span class=\"line\">$ git add [file]</span><br><span class=\"line\">$ git commit --amend</span><br><span class=\"line\">[master 16328cb] check: <span class=\"built_in\">test</span> amend commit <span class=\"keyword\">in</span> an easy way</span><br><span class=\"line\">Date: Mon Jun 11 08:47:14 2018 +0800</span><br><span class=\"line\">3 files changed, 20635 insertions(+), 273 deletions(-)</span><br><span class=\"line\">delete mode 100644 assets/Script/Refresh.ts</span><br><span class=\"line\">create mode 100644 creator.d.ts</span><br><span class=\"line\">rename assets/Script/homePage.js =&gt; temp.js (100%)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消已暂存<em>文件</em></p>\n<p>添加完文件后发现有多余文件，通过 <code>git reset HEAD &lt;file&gt;</code> 实现移除即可，\b然后\b利用 <code>git status</code> 可查看文件状态，这时\b该文件处于已修改未暂存的状态。</p>\n</li>\n<li><p>取消对文件的<em>修改</em></p>\n<p>当修改某文件后想回退到修改之前的版本，此时先运行 <code>git status</code> 显示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ emacs .gitignore</span><br><span class=\"line\">$ git st</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"comment\"># in working directory)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  modified:   .gitignore</span><br><span class=\"line\"></span><br><span class=\"line\">$ git checkout -- .gitignore</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">  new file:   .gitignore</span><br></pre></td></tr></table></figure>\n<p>此时再查看文件内容已经回到之前的版本，所有修改全部丢失。<br>如果只需回退版本同时保留\b修改内容，可用 stashing 和分支处理。</p>\n<p><strong>所有提交到Git的数据都可以被恢复。</strong></p>\n</li>\n</ul>\n<h2 id=\"5-远程仓库\"><a href=\"#5-远程仓库\" class=\"headerlink\" title=\"5. 远程仓库\"></a>5. 远程仓库</h2><ul>\n<li><p>查看当前配置的远程仓库</p>\n<p>使用 <code>git remote</code> 可查看当前目录配置的远程仓库，Git默认生成名字为 origin 的原始仓库。</p>\n<p>使用 <code>git remote -v</code> 显示仓库名称和地址，如有多个远程仓库也能全部列出。</p>\n</li>\n<li><p>添加远程仓库</p>\n<p>通过 <code>git remote add [name] [url]</code> 添加远程仓库，[name] 可以随意命名，而且是一个仓库的名字，不是分支。</p>\n</li>\n<li><p>抓取数据</p>\n<p>关联远程仓库后，通过 <code>git fetch [remote-name]</code> 即可抓取分支上有的、本地没有的数据。</p>\n<p><strong>fetch 执行之后\b本地才能访问到这个分支，进行所有后续操作。\b只关联不抓取没有用。</strong></p>\n<p>fetch 命令只将远端数据拉到本地，不会自动合并，需要手动合并。</p>\n<p>在跟踪远端仓库的分支后，使用 <code>git pull</code> 命令可以自动抓取数据并自动合并到本地仓库的当前分支。</p>\n</li>\n<li><p>推送数据至远程仓库</p>\n<p>通过命令 <code>git push [remote-name] [branch-name]</code> 实现。</p>\n</li>\n<li><p>查看远程仓库信息</p>\n<p>通过 <code>git remote show [remote-name]</code> 查看某个远程仓库的信息，显示在当前目录中运行 <code>git fetch</code> 和 <code>git push</code> 时自动执行的分支、远端分支中已跟踪和未跟踪的分支、运行 <code>git push</code> 时缺省推送的分支。</p>\n</li>\n<li><p>远程仓库的删除和重命名</p>\n<p>通过 <code>git remote rename [name] [new-name]</code> 进行重命名，通过 <code>git remote rm [branch-name]</code> 进行\b远端仓库删除。</p>\n</li>\n</ul>\n<h2 id=\"6-打标签\"><a href=\"#6-打标签\" class=\"headerlink\" title=\"6. 打标签\"></a>6. 打标签</h2><ul>\n<li><p>查看已有标签，运行 <code>git tag</code></p>\n</li>\n<li><p>新建标签</p>\n<p>分为两类：轻量级的和含附注的。<br>创建一个含附注的标签，使用 <code>git tag -a [version] -m [commit]</code> 指定标签名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a v1.2 -m <span class=\"string\">'version 1.2'</span> </span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">v1.2</span><br></pre></td></tr></table></figure>\n<p>执行 <code>git tag -a v12</code>，默认编辑器添加commit。再执行 <code>git show [version]</code> 查看相应标签的版本信息，并连同显示打标签的提交对象。</p>\n</li>\n<li><p>签署标签</p>\n<p>使用GPG签署标签，需要有自己的私钥:<code>git tag -s v0.9 -m &#39;signed 0.9</code> 。</p>\n</li>\n<li><p>轻量级标签</p>\n<p>轻量级标签实际上是保存着对应提交对象的校验核信息的文件，命令不带参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag v1.1</span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">v1.1</span><br><span class=\"line\">v12</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证标签</p>\n<p><code>git tag -v [tag-name]</code> 可验证签署的标签，需要有签署者的公钥，存放在keyring中。</p>\n</li>\n<li><p>后期加注标签</p>\n<p>可以对原来的提交加注标签，通过 <code>git tag -a [version] [SHA-1]</code> 实现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=oneline</span><br><span class=\"line\"><span class=\"comment\"># 05f64a0746978bcba0219a04196545052ccb4f1d initial # project version</span></span><br><span class=\"line\">$ git tag -a v4d 05f6</span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">v1.1</span><br><span class=\"line\">v4d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分享标签</p>\n<p>默认情况下，<code>git push</code> 不会推送标签到远端，必须添加显式命令分享标签，运行 <code>git push origin [tagname]</code> 即可，如一次性推送所有标签，使用 <code>git push origin --tags</code>。</p>\n</li>\n</ul>\n<h2 id=\"7-技巧\"><a href=\"#7-技巧\" class=\"headerlink\" title=\"7. 技巧\"></a>7. 技巧</h2><ul>\n<li><p>自动完成</p>\n<p>在 Git 的源码中提供自动完成的脚本，可以复制到用户主目录中</p>\n</li>\n<li><p>Git 命令别名：<code>git config --global alias.[alias] [original name]</code>。</p>\n<p>使用下述写法相当于创建新命令，如取消暂存文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.unstage <span class=\"string\">'reset HEAD --'</span></span><br></pre></td></tr></table></figure>\n<p>如查看最后一次的提交信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.last <span class=\"string\">'log -1 HEAD'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h1 id=\"三、Git-分支\"><a href=\"#三、Git-分支\" class=\"headerlink\" title=\"三、Git 分支\"></a>三、Git 分支</h1><h2 id=\"1-理解分支\"><a href=\"#1-理解分支\" class=\"headerlink\" title=\"1. 理解分支\"></a>1. 理解分支</h2><p>Git 中的分支本质上是个<strong>指向 commit 对象的可变指针</strong>。Git 使用 master 作为分支的默认名字，在多次提交后，指向最后一次提交对象的 master \b分支在每次提交时自动向前移动。</p>\n<p>Git 创建新的分支时即创建一个新的分支指针。</p>\n<p><em>Git 内保存一个名为 HEAD 的特别指针，指向工作中的本地分支。</em></p>\n<p>Git 中的分支仅是一个包含所指对象<em>校验和</em>（SHA-1）的文件，所以非常容易创建和销毁，而且迅速；提交时记录 parent 对象，所以易于合并。</p>\n<h2 id=\"2-基本的分支与合并\"><a href=\"#2-基本的分支与合并\" class=\"headerlink\" title=\"2. 基本的分支与合并\"></a>2. 基本的分支与合并</h2><p>在实际工作中，很多时候会创建多个分支并行开发。当切换分支时，Git 会将工作目录的内容恢复为检出某分支时它所指向的那个 commit 的快照，自动添加、删除或修改文件以确保内容与上次提交时一致。</p>\n<p>如果顺着一个分支走下去可以到达另一个分支，那么 Git 在合并时只会简单地把指针前移（无需解决分歧），即快进 Fast-forward。</p>\n<p>但如果\b不同分支内修改了相同文件，Git 在自动合并时产生冲突，无法自动合并，这时合并不只是移动指针，Git 分别从各自分支的末端和他们的共同祖先进行了三方合并计算，将结果创建新快照，提交到新的特殊的commit，即 merge commit，在合并过程中 Git 自己判断哪个分支是最佳合并基础，不需要手动指定。当我们修改冲突文件后，依次上传即可。</p>\n<h2 id=\"3-分支管理\"><a href=\"#3-分支管理\" class=\"headerlink\" title=\"3. 分支管理\"></a>3. 分支管理</h2><p>通过 <code>git branch</code> 可以查看分支列表，<code>git branch -v</code> 能查看分支列表以及它们各自最后一次 commit 信息，<code>git branch --merged</code> 可以查看哪些分支已被合并、<code>git branch --no-merged</code> 可查看尚未被合并的分支。</p>\n<h2 id=\"4-分支式工作流程\"><a href=\"#4-分支式工作流程\" class=\"headerlink\" title=\"4. 分支式工作流程\"></a>4. 分支式工作流程</h2><p>保留master分支上的稳定版本，使用其他平行分支进行测试开发，所以稳定分支经常比较老旧。在大型或复杂的项目中，这种工作方式有利于维护不同层次的稳定性。</p>\n<h2 id=\"5-远程分支\"><a href=\"#5-远程分支\" class=\"headerlink\" title=\"5. 远程分支\"></a>5. 远程分支</h2><p>远程分支是对远程仓库状态的索引。</p>\n<p>特点：无法移动；只有在进行 Git 的网络活动时会更新。</p>\n<p>表示形式： 远程仓库名／分支名</p>\n<ul>\n<li>5.1 推送</li>\n</ul>\n<p>\b<code>git push origin [branch]</code> </p>\n<p>（默认把远程分支命名与本地分支相同）<br>完整版命令： <code>git push origin [local-branch]:[remote-branch]</code></p>\n<ul>\n<li>5.2 跟踪分支</li>\n</ul>\n<p>从远程分支检出的本地分支称为跟踪分支。</p>\n<p>通过 <code>git checkout --track origin/[branch]</code> 在已有的本地分支内跟踪远程分支，<code>git checkout -b [branch] origin/[branch]</code> 创建并切换到新的本地分支，并且将远程分支里的内容合并到该分支内。跟踪分支是与远程分支有直接联系的本地分支，在跟踪分支内使用 <code>git push</code> 时 Git 自行推断推送到哪个远程分支、使用 <code>git pull</code> 会获取所有远程索引并把数据合并到本地分支。</p>\n<ul>\n<li>5.3 删除远程分支</li>\n</ul>\n<p><code>git push origin :[branch]</code></p>\n<p>原理：使用 <code>git push [remote-name] [local-branch]:[remote-branch]</code> 时本地分支为空白</p>\n<h2 id=\"6-衍合\"><a href=\"#6-衍合\" class=\"headerlink\" title=\"6 衍合\"></a>6 衍合</h2><p>整合分支的方法有两种： merge（合并）和 rebase（衍合）。</p>\n<ul>\n<li><p>merge：把两个分支最新的快照（C3、C4）以及二者最新的共同祖先（C2）进行三方合并，如下图：<br><img src=\"http://test.imgurl.org/temp/1807/71c0d50ca56302b9.png\" alt=\"merge\"></p>\n</li>\n<li><p>rebase: 把C3里产生变化的补丁重新在C4的基础上打一遍。原理是回到两个分支的共同祖先，提取每次提交时产生的差异，把这些差异分别保存到临时文件\b内，然后从当前分支转换到需要衍合的分支，依序使用每一个差异补丁文件。</p>\n</li>\n</ul>\n<p><img src=\"http://test.imgurl.org/temp/1807/e844a07079f0797b.png\" alt=\"rebase\"></p>\n<p>上图所示及将 C3 产生的\b改变衍合到 C4，然后再切换到 master 进行快进合并即可，此时的 C3‘ 与上述方法的 C5 相同，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout experiment</span><br><span class=\"line\">$ git rebase master</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge experiment</span><br></pre></td></tr></table></figure>\n<p><strong>永远不要衍合已经推送到公共仓库的更新。</strong>在衍合的过程中实际上抛弃了现存的 commit 并且创造了一些类似但不同于之前的新的 commit。如果他人下载某分支\b并在此基础上工作，该分支的上传者利用 <code>git rebase</code> 重写了 commit，那么其他人就必须重新合并（相同的日期与提交说明，不同的 SHA-1 校验值）。</p>\n<hr>\n<h1 id=\"四、服务器上的-Git\"><a href=\"#四、服务器上的-Git\" class=\"headerlink\" title=\"四、服务器上的 Git\"></a>四、服务器上的 Git</h1><p>任何人都可以访问的共享仓库，可以推送和拉取数据，那么这个仓库可称为“<strong>git 服务器</strong>”。</p>\n<h2 id=\"1-协议\"><a href=\"#1-协议\" class=\"headerlink\" title=\"1. 协议\"></a>1. 协议</h2><p>Git 可以使用四种主要的协议来传输数据： 本地传输、SSH 协议、Git 协议和 HTTP 协议。</p>\n<p>除 HTTP 协议外，其他协议均要求在服务器端安装并运行 Git。</p>\n<h3 id=\"1-1-本地协议\"><a href=\"#1-1-本地协议\" class=\"headerlink\" title=\"1.1 本地协议\"></a>1.1 本地协议</h3><p>本地协议是最基础的协议，远程仓库在本地协议中就是硬盘上的另一个目录。用于团队中每个成员都对一个共享的文件系统（如 NFS）拥有访问权，或多人公用同一台电脑（较少）。</p>\n<p>命令如 <code>git clone /opt/git/.git</code> 或 <code>git clone file:///opt/git/.git</code>。</p>\n<p>优点在于简单，并同时保留了现存文件的权限和网络访问权限。缺点在于不能从不同位置访问此共享权限。如想在家里访问，需要先挂载远程硬盘，比基于网络连接的访问速度更慢；缺点之二在于该方法不一定最快，本地仓库只在数据访问速度快时才快，如果在同一个服务器上，都\b允许 Git 访问本地硬盘，通过 NFS 访问仓库通常比 SSH 更慢。</p>\n<h3 id=\"1-2-SSH-协议\"><a href=\"#1-2-SSH-协议\" class=\"headerlink\" title=\"1.2 SSH 协议\"></a>1.2 SSH 协议</h3><p>SSH 协议是 Git 传输协议中最常见的协议，也是唯一一个同时便于读和写的网络协议（HTTP 和 Git 通常是只读的），而且可以验证授权。</p>\n<p><code>git clone ssh://user@server:project.git</code>，不指明协议时 Git 默认使用 SSH：<code>git clone user@server:project.git</code>不指明用户时 Git 默认使用当前登陆的用户：<code>git clone server:project.git</code></p>\n<ul>\n<li>优点：拥有对网络仓库的写的权限；SSH 架设相对简单；SSH 安全性高；SSH 在传输前尽可能压缩数据（高效）。</li>\n<li>缺点：不能实现仓库的匿名访问（不利于开源项目）。</li>\n</ul>\n<h3 id=\"1-3-Git-协议\"><a href=\"#1-3-Git-协议\" class=\"headerlink\" title=\"1.3 Git 协议\"></a>1.3 Git 协议</h3><p>包含在 Git 软件包中的特殊守护进程，\b监听一个提供类似于 SSH 服务的特定端口（9418）而无需任何授权。Git 协议是现存最快的传输协议，缺点就是缺少授权机制。</p>\n<h3 id=\"1-4-HTTP-S-协议\"><a href=\"#1-4-HTTP-S-协议\" class=\"headerlink\" title=\"1.4 HTTP/S 协议\"></a>1.4 HTTP/S 协议</h3><p>该协议架设简便，将 Git 的纯仓库文件放在 HTTP 的文件根目录下，配置一个特定的 post-update 钩挂即可。\bHTTP 协议的弊端在于客户端的效率更低。</p>\n<h2 id=\"2-在服务端部署-Git\"><a href=\"#2-在服务端部署-Git\" class=\"headerlink\" title=\"2. 在服务端部署 Git\"></a>2. 在服务端部署 Git</h2><p>\b略\b</p>\n<h2 id=\"3-生成-SSH-公钥\"><a href=\"#3-生成-SSH-公钥\" class=\"headerlink\" title=\"3. \b生成 SSH 公钥\"></a>3. \b生成 SSH 公钥</h2><p>首先确认是否已有公钥，SSH 公钥默认存储在账户的 ~/.ssh 目录，查看该目录下是否有‘文件名’和‘文件名.pub’来命名的一对文件。‘文件名’通常是 id_dsa 或 id_rsa，.pub 是公钥，另一个是秘钥。如不存在这些文件或目录，可用如下命令生成：</p>\n<p><code>ssh-keygen</code></p>\n<h2 id=\"4-架设服务器\"><a href=\"#4-架设服务器\" class=\"headerlink\" title=\"4. 架设服务器\"></a>4. 架设服务器</h2><p>将公钥添加至服务器。</p>\n<h2 id=\"5-公共访问\"><a href=\"#5-公共访问\" class=\"headerlink\" title=\"5. 公共访问\"></a>5. 公共访问</h2><p>运行一个静态 web 服务，将其跟目录设为 Git 仓库所在的位置，开启 post-update 挂钩，即可实现匿名读取权限。</p>\n<h2 id=\"6-网页界面-GitWeb\"><a href=\"#6-网页界面-GitWeb\" class=\"headerlink\" title=\"6. 网页界面 GitWeb\"></a>6. 网页界面 GitWeb</h2><p>Git 自带一个叫做 GitWeb 的 CGI 脚本，可以架设一个简单的网页界面使其可视化</p>\n<h2 id=\"7-权限管理器-Gitosis\"><a href=\"#7-权限管理器-Gitosis\" class=\"headerlink\" title=\"7. 权限管理器 Gitosis\"></a>7. 权限管理器 Gitosis</h2><p>略</p>\n<h2 id=\"8-Git-进程\"><a href=\"#8-Git-进程\" class=\"headerlink\" title=\"8. Git 进程\"></a>8. Git 进程</h2><p>略</p>\n<h2 id=\"9-Git-托管服务\"><a href=\"#9-Git-托管服务\" class=\"headerlink\" title=\"9. Git 托管服务\"></a>9. Git 托管服务</h2><p>支持 Git 托管的站点如下图示：</p>\n<p><img src=\"http://test.imgurl.org/temp/1807/9680ba9a15042327.png\" alt=\"git\"></p>\n<hr>\n<h1 id=\"五、分布式-Git\"><a href=\"#五、分布式-Git\" class=\"headerlink\" title=\"五、分布式 Git\"></a>五、分布式 Git</h1><h2 id=\"1-分布式工作流程\"><a href=\"#1-分布式工作流程\" class=\"headerlink\" title=\"1.分布式工作流程\"></a>1.分布式工作流程</h2><h3 id=\"1-1-集中式工作流\"><a href=\"#1-1-集中式工作流\" class=\"headerlink\" title=\"1.1 集中式工作流\"></a>1.1 集中式工作流</h3><p>通常集中式工作流使用单点操作模型，存放代码仓库的中心服务器可以接受所有开发者提交的代码，所有开发者都是普通节点。</p>\n<p>如果有两个开发者同时克隆并进行开发，修改不同内容，只有在\b第一个开发者推送到服务器后、第二个开发者必须先合并第一个开发者修改后的数据后才能推送到共享服务器。</p>\n<h3 id=\"1-2-集成管理员工作流\"><a href=\"#1-2-集成管理员工作流\" class=\"headerlink\" title=\"1.2 集成管理员工作流\"></a>1.2 集成管理员工作流</h3><p>开发者们从官方的项目仓库克隆到自己的公共仓库，修改后将自己的提交推送，由官方仓库的维护者拉取并合并到主项目。维护者在自己的本地也有克隆仓库，可以将开发者的公共仓库作为远程仓库添加进来，经过测试无误后合并到主干分支，再推送到官方仓库。GitHub 上使用得最多的就是这种工作流，fork 某个项目到自己的列表，称为自己的公共仓库，然后将更新提交到这个仓库，便于开发者和维护者各自进行工作。</p>\n<h3 id=\"1-3-司令官与副官工作流\"><a href=\"#1-3-司令官与副官工作流\" class=\"headerlink\" title=\"1.3 司令官与副官工作流\"></a>1.3 司令官与副官工作流</h3><p>一般用于超大型的项目，比如 Linux 内核项目。各个集成管理员分别负责集成项目中的特定部分（即副官），所有这些集成管理员头上还有一个负责统筹的总集成管理员（司令官），司令官维护的仓库用于提供所有协作者拉取最新集成的项目代码。</p>\n<p><img src=\"http://test.imgurl.org/temp/1807/a2bc8531e663275d.png\" alt=\"司令官与副官工作流\"></p>\n<h2 id=\"2-为项目做贡献\"><a href=\"#2-为项目做贡献\" class=\"headerlink\" title=\"2. 为项目做贡献\"></a>2. 为项目做贡献</h2><h3 id=\"2-1-提交指南\"><a href=\"#2-1-提交指南\" class=\"headerlink\" title=\"2.1 提交指南\"></a>2.1 提交指南</h3><ul>\n<li>不要在更新中提交多余的白字符（whitespace）</li>\n<li>每次提交时限定于完成一次逻辑功能，如果可能的话分解为多次小更新，以便于理解。</li>\n<li>提交说明的撰写规范：提交说明最好限制在一行内；50 个字以下；简明扼要描述更新内容，空一行后再详细\b注解；尽可能详尽注释，包括修订的因由、前后不同实现之间的比较；使用祈使现在式语态，如不要使用 ‘added tests’ 而要使用‘add tests’。来自 tpope.net 的 Tim Pope 提出的模版：</li>\n</ul>\n<p><img src=\"http://test.imgurl.org/temp/1807/904d1fd07b327f09.png\" alt=\"提交说明的模版\"></p>\n<h3 id=\"2-2-私有的小型团队\"><a href=\"#2-2-私有的小型团队\" class=\"headerlink\" title=\"2.2 私有的小型团队\"></a>2.2 私有的小型团队</h3><p>在工作中的一个私有项目，有几位开发者共同开发，源代码不公开，所有开发者都具有推送数据到仓库的权限。</p>\n<h3 id=\"2-3-私有团队间协作\"><a href=\"#2-3-私有团队间协作\" class=\"headerlink\" title=\"2.3 私有团队间协作\"></a>2.3 私有团队间协作</h3><p>更大一点规模的私有团队协作，几个小组分头开发若干特定的功能和集成。利用 Git 分支开发。</p>\n<h3 id=\"2-4-公开的小型项目\"><a href=\"#2-4-公开的小型项目\" class=\"headerlink\" title=\"2.4 \b公开的小型项目\"></a>2.4 \b公开的小型项目</h3><p>当没有直接更新主仓库分支的权限时，通过一下两种方法将工作成果交给项目\b人维护：第一种是 fork，第二种是通过电子邮件寄送文件补丁。</p>\n<h3 id=\"2-5-公开的大型项目\"><a href=\"#2-5-公开的大型项目\" class=\"headerlink\" title=\"2.5 公开的大型项目\"></a>2.5 公开的大型项目</h3><p>许多大型项目都有自己的接受补丁流程，多数都允许通过开发者邮件列表接受补丁。</p>\n<h2 id=\"3-项目的管理\"><a href=\"#3-项目的管理\" class=\"headerlink\" title=\"3. 项目的管理\"></a>3. 项目的管理</h2><ul>\n<li>使用特性分支进行工作</li>\n<li>采纳来自邮件的补丁</li>\n<li>检出远程分支</li>\n<li>决断代码取舍</li>\n<li>代码继承</li>\n<li>给发行版签名</li>\n<li>生成内部版本号</li>\n<li>准备发布</li>\n<li>制作简报</li>\n</ul>\n<hr>\n<h1 id=\"六、Git-工具\"><a href=\"#六、Git-工具\" class=\"headerlink\" title=\"六、Git 工具\"></a>六、Git 工具</h1><p>以下这些是 Git 非常强大的功能，可能并不会再日常操作种使用，但某些时候也许会需要。</p>\n<h2 id=\"1-修订版本选择\"><a href=\"#1-修订版本选择\" class=\"headerlink\" title=\"1. 修订版本选择\"></a>1. 修订版本选择</h2><ul>\n<li><p>通过使用给出的 SHA-1 值来指明一次提交。Git 可以通过你提供的\b不少于4个的且没有歧义的（只有一个对象以这段 SHA-1 开头）字符来识别你要查看的那次提交。如果出现两个具有相同 SHA-1 值的对象，会得到先前的对象的数据，不过机率非常小。</p>\n</li>\n<li><p>使用分支名称可以指明某次提交。</p>\n</li>\n<li><p><code>git reflog</code>: 在引用日志种查看提交记录。</p>\n</li>\n<li><p>通过其祖先来指明某次提交，在 SHA-1 后或 HEAD 后加 ‘^’，可以查看此次提交的副体检。</p>\n</li>\n<li><p>指明一定范围内的提交，如考虑某分支上还有哪些数据未合并到主分支。</p>\n<ul>\n<li>双点：让 Git 区分出可从一个分支种获取而不能从另一个分支种\b获取的\b提交。如下图所示，想要查看 experiment \b上有什么内容没有提交到 master，使用命令 <code>git log master..experiment</code>（输出D、C）</li>\n</ul>\n<p><img src=\"http://test.imgurl.org/temp/1807/95f6cf1ed81ab232.png\" alt=\"双点\"></p>\n<ul>\n<li><p>多点：在引用前使用 \b‘^’ \b或 ‘–not’ 指明不希望提交被包含在内的分支，如 <code>git log ^refA refB</code></p>\n</li>\n<li><p>三点：指定被两个引用种的一个包含但又不被两者同时包含的分支。通过 log 命令的常用参数 <code>--left-right</code>，如 <code>git log --left-right master..experiment</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-交互式暂存\"><a href=\"#2-交互式暂存\" class=\"headerlink\" title=\"2. 交互式暂存\"></a>2. 交互式暂存</h2><p>Git 中提供了很多脚本来辅助某些命令行\b任务，方便开发者构建\b只包含特定组合和部分文件的提交。</p>\n<p>如在运行 <code>git add</code> 时加上 ‘-i’或 ‘–interactive’，Git 进入到交互式的 shell 模式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -i</span><br><span class=\"line\">           staged     unstaged path</span><br><span class=\"line\">  1:        +1/-0      nothing aj.js</span><br><span class=\"line\"></span><br><span class=\"line\">*** Commands ***</span><br><span class=\"line\">  1: status\t  2: update\t  3: revert\t  4: add untracked</span><br><span class=\"line\">  5: patch\t  6: diff\t  7: quit\t  8: help</span><br><span class=\"line\">What now&gt; 1</span><br><span class=\"line\">           staged     unstaged path</span><br><span class=\"line\">  1:        +1/-0      nothing aj.js</span><br><span class=\"line\"></span><br><span class=\"line\">*** Commands ***</span><br><span class=\"line\">  1: status\t  2: update\t  3: revert\t  4: add untracked</span><br><span class=\"line\">  5: patch\t  6: diff\t  7: quit\t  8: help</span><br><span class=\"line\">What now&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-储藏\"><a href=\"#3-储藏\" class=\"headerlink\" title=\"3. 储藏\"></a>3. 储藏</h2><p>当在进行项目种某部分的工作，里面的东西处于杂乱的状态，如果想转到其他分支上进行其他工作时，并不想提交现在的进行到一半的工作，否则以后无法\b回到这个工作点，这时可以使用 <code>git stash</code> 进行储藏。</p>\n<p>储藏可以获取工作目录中的中间状态，并将其保存到一个未完结变更的\b堆栈中，随时可以调用。</p>\n<p><code>git stash list</code> 可以查看现有的储藏，<code>git stash apply</code> 会默认使用最近的储藏并尝试应用，如果想指定某个储藏： <code>git stash apply stash@2</code>（从0开始）。</p>\n<p><code>git stash branch [branch]</code> 创建一个新的分支，重新应用，成功后丢弃储藏。</p>\n<h2 id=\"4-重写历史\"><a href=\"#4-重写历史\" class=\"headerlink\" title=\"4. 重写历史\"></a>4. 重写历史</h2><h3 id=\"4-1-改变最近一次提交\"><a href=\"#4-1-改变最近一次提交\" class=\"headerlink\" title=\"4.1 改变最近一次提交\"></a>4.1 改变最近一次提交</h3><p>改变提交说明，或改变\b杠杠通过增加、改变、删除而记录的快照。</p>\n<p>修改最近一次提交说明：<code>git commit --amend</code></p>\n<h3 id=\"4-2-修改多个提交说明\"><a href=\"#4-2-修改多个提交说明\" class=\"headerlink\" title=\"4.2 修改多个提交说明\"></a>4.2 修改多个提交说明</h3><p>Git 没有修改历史的工具，但可以使用 rebase 工具来衍合一系列的提交到它们原来所在的 HEAD 上而不是移到新的上面。</p>\n<p>使用 <code>git rebase -i</code>，再\b指明想要\b衍合的提交，如 <code>git rebase -i HEAD^3</code>，即修改第三次提交的副提交（四次提交）</p>\n<h2 id=\"5-使用-Git-调试\"><a href=\"#5-使用-Git-调试\" class=\"headerlink\" title=\"5. 使用 Git 调试\"></a>5. 使用 Git 调试</h2><h3 id=\"5-1-文件标注\"><a href=\"#5-1-文件标注\" class=\"headerlink\" title=\"5.1 文件标注\"></a>5.1 文件标注</h3><p>文件标注可以追踪某段代码到底是何时引入的，通过 <code>git blame</code> 来标注文件，参数 <code>-L</code> 可限制\b\b输出范围，<code>-C</code> 会分析标注的文件，如果时从其他地方拷贝来的文件则会尝试找出其中代码片段的原始出处。</p>\n<h3 id=\"5-2-二分查找\"><a href=\"#5-2-二分查找\" class=\"headerlink\" title=\"5.2 二分查找\"></a>5.2 二分查找</h3><p>如果不知道问题在哪里发生时，使用二分查找可确认哪次提交引入了错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git bisect start</span><br><span class=\"line\">$ git bisect bad</span><br><span class=\"line\">$ git bisect good [commit-tag]</span><br><span class=\"line\"># 告诉 bisect 已知的最后一次\b的正常\b提交</span><br></pre></td></tr></table></figure>\n<p>然后 Git 查询在这次正常提交后到当前的错误版本之间所有的提交，检出其中一个，在测试后如无问题则 <code>git bisect good</code>，Git 继续提供下一个直到发现错误的提交时 <code>git bisect bad</code>，修复错误后运行 <code>git bisect reset</code> 重设 HEAD 到开始的地方。</p>\n<h2 id=\"6-子模块\"><a href=\"#6-子模块\" class=\"headerlink\" title=\"6. 子模块\"></a>6. 子模块</h2><p>现实情况中，当你在一个项目上工作时，需要使用另外一个项目，可能时一个第三方库或是独立开发的库。Git 子模块允许将一个 Git 仓库当作另外一个 Git 仓库的子目录，\b允许克隆另外一个仓库到项目中并保持你的提交相对独立。</p>\n<ul>\n<li><p>通过 <code>git submodule add</code> 将外部项目添加为子模块，会新增 ‘.gitmodules’ 文件。</p>\n</li>\n<li><p>克隆一个带有子模块的项目，在执行 <code>git clone</code> 后要\b运行 <code>git submodule init</code> 来初始化本地配置文件，<code>git submodule update</code> 来拉取所有数据并检出上层项目内所列出的合适的提交，此后的每次拉取都需要运行 <code>git submodule update</code></p>\n</li>\n<li><p>如果工作中要按照分组获取一个大项目的子目录的子集，只要将每一个子目录都做成独立的 Git 仓库，然后创建一个上层项目的 Git 仓库包含多个子模块。这个方法的优势在于可以在上层项目中通过标签和分支更为明确地定义项目之间的关系。</p>\n</li>\n</ul>\n<h2 id=\"7-子树合并\"><a href=\"#7-子树合并\" class=\"headerlink\" title=\"7. 子树合并\"></a>7. 子树合并</h2><p>当 Git 归并时，它会检查需要归并的内容然后选择一个合适的归并策略。如果是两个，Git 使用递归策略；如果\b超过两个，使用章鱼策略。</p>\n<p>除此之外也可以选择子树归并。子树归并的思想是当拥有两个工程，将其中一个项目映射到另外一个项目的子目录中，反之亦同。</p>\n","categories":["programing"],"tags":["Git"]},{"title":"About","url":"http://shifei.online/about/index.html","content":"","categories":[],"tags":[]},{"title":"categories","url":"http://shifei.online/categories/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"http://shifei.online/tags/index.html","content":"","categories":[],"tags":[]}]