<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vacuum</title>
  
  <subtitle>Keep it real, keep it possible</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shifei.online/"/>
  <updated>2020-02-16T23:54:48.381Z</updated>
  <id>http://shifei.online/</id>
  
  <author>
    <name>改变成真</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>��Ŀ��XXX���ѱ� OS X ʹ�ã����ܴ򿪵Ľ���취</title>
    <link href="http://shifei.online/2020/02/17/bugs/"/>
    <id>http://shifei.online/2020/02/17/bugs/</id>
    <published>2020-02-16T23:33:07.850Z</published>
    <updated>2020-02-16T23:54:48.381Z</updated>
    
    <content type="html"><![CDATA[<p>���ն��н��뵽Ӳ���ڵĶ�Ӧ�ļ�Ŀ¼�����룺ls -l ������Կ�����</p><p>��Щ��ռ�õ��ļ����Ժ��涼������@������ Mac OS X �ļ�ϵͳ�ĸ�������extended attributes��</p><p>ִ�����xattr -c <em> . </em> �ɶ�Ŀ¼�������ļ����и������������</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;���ն��н��뵽Ӳ���ڵĶ�Ӧ�ļ�Ŀ¼�����룺ls -l ������Կ�����&lt;/p&gt;
&lt;p&gt;��Щ��ռ�õ��ļ����Ժ��涼������@������ Mac OS X �ļ�ϵͳ�ĸ�������extended attributes��&lt;/p&gt;
      
    
    </summary>
    
      <category term="bugs" scheme="http://shifei.online/categories/bugs/"/>
    
    
      <category term="bugs" scheme="http://shifei.online/tags/bugs/"/>
    
  </entry>
  
  <entry>
    <title>一日双城、一日双塔挑战记录</title>
    <link href="http://shifei.online/2019/05/20/cycle/"/>
    <id>http://shifei.online/2019/05/20/cycle/</id>
    <published>2019-05-20T03:43:02.020Z</published>
    <updated>2019-05-20T03:52:51.190Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="https://connect.garmin.com/modern/activity/1009707790" target="_blank" rel="noopener">双城</a></li><li><a href="https://connect.garmin.com/modern/activity/1070451224" target="_blank" rel="noopener">双塔</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://connect.garmin.com/modern/activity/1009707790&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;双城&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://con
      
    
    </summary>
    
      <category term="oneDayChallenge" scheme="http://shifei.online/categories/oneDayChallenge/"/>
    
    
      <category term="Taiwan" scheme="http://shifei.online/tags/Taiwan/"/>
    
  </entry>
  
  <entry>
    <title>ps 人像懒人包</title>
    <link href="http://shifei.online/2019/05/01/ps/"/>
    <id>http://shifei.online/2019/05/01/ps/</id>
    <published>2019-05-01T03:00:22.937Z</published>
    <updated>2019-05-01T04:52:46.785Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>黑眼圈：画笔工具 ➡ 透明度 30%（10-30%） ➡ Opt + 鼠标左键吸正常肤色 ➡ 层叠覆盖，不要涂抹</p></li><li><p>去痘：两种方式</p><ul><li>修补工具 ➡ 鼠标勾勒轮廓 ➡ 移动至适用部位即可</li><li>图章工具 ➡ 移动至光滑皮肤 Opt + 鼠标左键选择当前作为印章样式 ➡ 在痘上单机左键即可修复 </li></ul></li></ol><a id="more"></a><ol start="3"><li>磨皮：</li></ol><ul><li>通道 ➡ 复制蓝色通道</li><li>滤镜 ➡ 其他 ➡ 高反差保留 ➡ 半径 8 像素</li><li>画笔 ➡ 前景色 #9f9f9f，硬度100%，透明度100%，流量100% 画出人像的眼睛和嘴巴</li><li>图像 ➡ 计算 ➡ 混合模式：强光 ➡ 确定后得到 Alpha 1，重复至得到 Alpha 3</li><li>Cmd + 点击 Alpha 3 的缩略图（选中光滑部分） ➡ Cmd + Shift + i （反选）</li><li>添加曲线，在曲线从左到右近 4/5 处往上拖动（已基本光滑）</li><li>Cmd + Opt + Shift + e 得到合并图层</li><li>用修复工具去痘</li><li>图层 ➡ 新建 ➡ 颜色：灰色；模式：柔光；钩上填充柔光中性色（50%灰）</li><li>画笔 ➡ 选择合适的颜色去涂五官 ➡ 不透明度：35%，硬度：0</li><li>调整 ➡ 色彩平衡（随意）</li><li>Cmd + Opt + Shift + e 得到最终合并图层</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;黑眼圈：画笔工具 ➡ 透明度 30%（10-30%） ➡ Opt + 鼠标左键吸正常肤色 ➡ 层叠覆盖，不要涂抹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;去痘：两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修补工具 ➡ 鼠标勾勒轮廓 ➡ 移动至适用部位即可&lt;/li&gt;
&lt;li&gt;图章工具 ➡ 移动至光滑皮肤 Opt + 鼠标左键选择当前作为印章样式 ➡ 在痘上单机左键即可修复 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Photoshop" scheme="http://shifei.online/categories/Photoshop/"/>
    
    
      <category term="Photoshop" scheme="http://shifei.online/tags/Photoshop/"/>
    
  </entry>
  
  <entry>
    <title>.gitignore 用法、模版与自动生成</title>
    <link href="http://shifei.online/2019/02/26/gitignore/"/>
    <id>http://shifei.online/2019/02/26/gitignore/</id>
    <published>2019-02-26T14:08:04.382Z</published>
    <updated>2019-02-26T14:19:44.074Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li>在根目录创建 .gitignore</li><li><p>文件 .gitignore 的格式规范如下：</p><ul><li>所有空行或以 # 开头的行（注释）都会被Git忽略</li><li>可以使用标准 glob 模式（shell 使用的简化正则表达式）匹配</li><li>如要忽略目录则在后面添加反斜杠 /</li><li>反向忽略可在模式前加惊叹号 ! 取反</li></ul><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*.json           # 忽略整个目录下所有以 .json 结尾的文件</span><br><span class="line">!jsconfig.json   # 但jsconfig.json除外</span><br><span class="line">/local           # 忽略主目录下的local文件（或文件夹）</span><br><span class="line">library/         # 忽略library文件夹</span><br><span class="line">assets/*.meta    # 忽略assets直属子目录下的所有 .meta 文件</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="自动生成-gitignore"><a href="#自动生成-gitignore" class="headerlink" title="自动生成 .gitignore"></a>自动生成 .gitignore</h3><p>访问<a href="https://gitignore.io/" target="_blank" rel="noopener">gitignore.io</a></p><hr><h3 id="github-团队提供的各种语言的-gitignore-模版"><a href="#github-团队提供的各种语言的-gitignore-模版" class="headerlink" title="github 团队提供的各种语言的 .gitignore 模版"></a>github 团队提供的各种语言的 .gitignore 模版</h3><p><a href="https://github.com/github/gitignore/blob/master/Node.gitignore" target="_blank" rel="noopener">node</a> 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"># Logs</span><br><span class="line">logs</span><br><span class="line">*.log</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line"></span><br><span class="line"># Runtime data</span><br><span class="line">pids</span><br><span class="line">*.pid</span><br><span class="line">*.seed</span><br><span class="line">*.pid.lock</span><br><span class="line"></span><br><span class="line"># Directory for instrumented libs generated by jscoverage/JSCover</span><br><span class="line">lib-cov</span><br><span class="line"></span><br><span class="line"># Coverage directory used by tools like istanbul</span><br><span class="line">coverage</span><br><span class="line"></span><br><span class="line"># nyc test coverage</span><br><span class="line">.nyc_output</span><br><span class="line"></span><br><span class="line"># Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)</span><br><span class="line">.grunt</span><br><span class="line"></span><br><span class="line"># Bower dependency directory (https://bower.io/)</span><br><span class="line">bower_components</span><br><span class="line"></span><br><span class="line"># node-waf configuration</span><br><span class="line">.lock-wscript</span><br><span class="line"></span><br><span class="line"># Compiled binary addons (https://nodejs.org/api/addons.html)</span><br><span class="line">build/Release</span><br><span class="line"></span><br><span class="line"># Dependency directories</span><br><span class="line">node_modules/</span><br><span class="line">jspm_packages/</span><br><span class="line"></span><br><span class="line"># TypeScript v1 declaration files</span><br><span class="line">typings/</span><br><span class="line"></span><br><span class="line"># Optional npm cache directory</span><br><span class="line">.npm</span><br><span class="line"></span><br><span class="line"># Optional eslint cache</span><br><span class="line">.eslintcache</span><br><span class="line"></span><br><span class="line"># Optional REPL history</span><br><span class="line">.node_repl_history</span><br><span class="line"></span><br><span class="line"># Output of &apos;npm pack&apos;</span><br><span class="line">*.tgz</span><br><span class="line"></span><br><span class="line"># Yarn Integrity file</span><br><span class="line">.yarn-integrity</span><br><span class="line"></span><br><span class="line"># dotenv environment variables file</span><br><span class="line">.env</span><br><span class="line">.env.test</span><br><span class="line"></span><br><span class="line"># parcel-bundler cache (https://parceljs.org/)</span><br><span class="line">.cache</span><br><span class="line"></span><br><span class="line"># next.js build output</span><br><span class="line">.next</span><br><span class="line"></span><br><span class="line"># nuxt.js build output</span><br><span class="line">.nuxt</span><br><span class="line"></span><br><span class="line"># vuepress build output</span><br><span class="line">.vuepress/dist</span><br><span class="line"></span><br><span class="line"># Serverless directories</span><br><span class="line">.serverless/</span><br><span class="line"></span><br><span class="line"># FuseBox cache</span><br><span class="line">.fusebox/</span><br><span class="line"></span><br><span class="line"># DynamoDB Local files</span><br><span class="line">.dynamodb/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在根目录创建 .gitignore&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文件 .gitignore 的格式规范如下：&lt;/p&gt;
      
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
    
      <category term="Git" scheme="http://shifei.online/tags/Git/"/>
    
      <category term="gitignore" scheme="http://shifei.online/tags/gitignore/"/>
    
  </entry>
  
  <entry>
    <title>Docker 注意事项</title>
    <link href="http://shifei.online/2019/02/24/docker-tips/"/>
    <id>http://shifei.online/2019/02/24/docker-tips/</id>
    <published>2019-02-24T12:01:37.756Z</published>
    <updated>2019-02-24T12:59:49.617Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在 docker 容器内使用 vim 时提示“vi: command not found”，需要先在容器里安装 vim，即运行<code>apt-get update &amp;&amp; apt-get -yq install vim</code> 即可</p></li><li><p><code>docker run</code> 的参数 <code>-p</code> 指<strong>主机（宿主）端口：容器端口</strong></p></li><li><p>docker 内运行 node，容器的端口和主机的端口必须全部与容器内运行的 node 端口一致</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 docker 容器内使用 vim 时提示“vi: command not found”，需要先在容器里安装 vim，即运行&lt;code&gt;apt-get update &amp;amp;&amp;amp; apt-get -yq install vim&lt;/code&gt; 即可
      
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
    
      <category term="docker" scheme="http://shifei.online/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>VPS 服务器 ssr 基础操作简记</title>
    <link href="http://shifei.online/2019/02/07/vps/"/>
    <id>http://shifei.online/2019/02/07/vps/</id>
    <published>2019-02-07T07:02:22.951Z</published>
    <updated>2019-04-01T06:31:24.980Z</updated>
    
    <content type="html"><![CDATA[<p><em>VPS 被封几率太高，简列基本操作步骤方便使用</em></p><ol><li><p>服务器端一步搭建</p><p> 参考<a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">自建vps服务器教程</a></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2018.11.20 更新</span></span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure></li><li><p>服务端管理 ssr（进入安装 ssr 目录后执行）：<code>bash ssr.sh</code> 或 <code>./ssr</code></p></li><li><p>免费 ssr 账号或浏览器翻墙</p><p> <a href="https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7" target="_blank" rel="noopener">GitHub</a><br> <a href="https://gitlab.com/Alvin9999/free/wikis/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7" target="_blank" rel="noopener">Gitlab(备用)</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;VPS 被封几率太高，简列基本操作步骤方便使用&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;服务器端一步搭建&lt;/p&gt;
&lt;p&gt; 参考&lt;a href=&quot;https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%B
      
    
    </summary>
    
      <category term="fly" scheme="http://shifei.online/categories/fly/"/>
    
    
      <category term="vps" scheme="http://shifei.online/tags/vps/"/>
    
      <category term="ssr" scheme="http://shifei.online/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>Node 笔记</title>
    <link href="http://shifei.online/2019/01/16/node/"/>
    <id>http://shifei.online/2019/01/16/node/</id>
    <published>2019-01-16T10:10:10.147Z</published>
    <updated>2019-02-20T02:05:58.002Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Node 使用了与 Web Workers 相同的模式解决线程中的问题，child_process 是基础 API，cluster 模块是更深层次应用。</li><li>事件循环、观察者、请求对象、I/O 线程池共同构成 Node 异步 I/O模型的基本要素</li><li>Node 中除了 JavaScript 是单线程， Node 自身是多线程，只是 I/O 线程使用的 CPU 较少</li><li>Node 中除用户代码不不可并行执行，所有的 I/O（磁盘 I/O 和网络 I/O 等）都可以并行</li></ol><a id="more"></a><ol start="5"><li>一个程序如果大部分时间进行计算、逻辑判断，称为 <em>CPU 密集</em>（压缩、解压、加密、解密），如果多进行存取、网络操作，称为 <em>I/O 密集</em>（文件操作、网络操作、数据库）</li><li>函数式编程包括高阶函数（函数作为参数或返回值）和偏函数用法（创建一个<em>调用另外一个参数或变量已经预置的函数</em>的函数）</li><li>异步编程方案：</li></ol><ul><li><p>事件监听模式，又称发布/订阅模式</p><p>具有 addListener/on()、once()、removeListener()、removeAllListeners()、emit()等</p></li><li><p>Promise/Deferred 模式</p><p>包括 Promises/A、Promises/B、Promises/D。</p><p>一个 Promise 对象具备 then() 方法，then() 定义为 <code>then(fulfilledHandler, errorHandler, progressHandler)</code>，接受完成态、错误态的回调，可选地支持 progress 事件回调。then() 只接受 function 对象，其余对象忽略，返回 Promise 对象，以实现链式调用。</p></li><li><p>流程控制库</p><ul><li><p>尾触发与 Next</p><p>需要手工调用才能持续执行后续调用的方法称为尾触发，常见的关键词是 next。多用于 Connect 中间件，将复杂的处理逻辑拆解为单一的处理单元逐层处理请求对象和响应对象。</p></li><li><p>async</p><ul><li>异步的串行执行</li><li>异步的并行执行（parallel()）</li><li>异步调用的依赖处理（waterfall()）</li><li>自动依赖处理（auto()）</li></ul></li><li><p>Step</p><p><code>Step(task1, task2, task3)</code></p></li><li><p>wind</p></li></ul></li><li><p>异步并发控制</p><ul><li>bagpipe</li><li>async 的 parallelLimit()</li></ul></li></ul><ol start="8"><li>进程与线程</li></ol><ul><li><p>进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。</p></li><li><p>线程是进程内一个相对独立、可调度的执行单元，与同属一个进程的线程共享进程的资源。多线程指启动一个进程，在一个进程内启动多个线程，这样多个线程也可以一块执行多个任务</p></li></ul><ol start="9"><li>require 特性：</li></ol><ul><li>module 被加载时执行，加载后缓存</li><li>一旦出现某个模块被循环加载，就只输出已经执行的部分，未执行部分不输出</li></ul><ol start="10"><li><p>commonJS 默认将 exports 设置为 module.exports，所以只能给 exports 添加属性，不能修改指向（eg: exports = …)，修改后值为 undefined，commonJS 模块对外输出永远是 module.exports。如想修改指向用 <code>module.exports = ...</code> 即可</p></li><li><p>path</p></li></ol><ul><li>“__dirname”、“__filename” 总是返回文件的绝对路径</li><li>“process.cwd()” 总是返回执行 node 命令所在文件夹</li><li>“./” 在 require 方法中总是相对当前文件所在文件夹（绝对路径）；在其他地方时则与 “process.cwd()” 相同</li></ul><ol start="12"><li><p>Buffer 的实例 buf.length 表示申请的空间，而不是内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">'this is a test!'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(buf.length) <span class="comment">// 15（字节） 一个中文三个字节</span></span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.allocUnsafe(<span class="number">10</span>) <span class="comment">// 或 const buf2 = Buffer.alloc(10)</span></span><br><span class="line">buf2[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(buf2.length) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Node 使用了与 Web Workers 相同的模式解决线程中的问题，child_process 是基础 API，cluster 模块是更深层次应用。&lt;/li&gt;
&lt;li&gt;事件循环、观察者、请求对象、I/O 线程池共同构成 Node 异步 I/O模型的基本要素&lt;/li&gt;
&lt;li&gt;Node 中除了 JavaScript 是单线程， Node 自身是多线程，只是 I/O 线程使用的 CPU 较少&lt;/li&gt;
&lt;li&gt;Node 中除用户代码不不可并行执行，所有的 I/O（磁盘 I/O 和网络 I/O 等）都可以并行&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
    
      <category term="node" scheme="http://shifei.online/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Markdown Cheat Sheet</title>
    <link href="http://shifei.online/2019/01/03/markdown/"/>
    <id>http://shifei.online/2019/01/03/markdown/</id>
    <published>2019-01-03T05:31:56.543Z</published>
    <updated>2019-01-04T07:27:24.768Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">Element</th><th style="text-align:left">Markdown Syntax</th></tr></thead><tbody><tr><td style="text-align:left">标题</td><td style="text-align:left"># H1<br> ## H2 <br> ### H3</td></tr><tr><td style="text-align:left">粗体</td><td style="text-align:left">**bold text**</td></tr><tr><td style="text-align:left">斜体</td><td style="text-align:left">*italicized text*</td></tr><tr><td style="text-align:left">引用</td><td style="text-align:left">> blockquote</td></tr><tr><td style="text-align:left">有序列表</td><td style="text-align:left">1. First item <br> 2. Second item <br> 3. Third item</td></tr><tr><td style="text-align:left">无序列表</td><td style="text-align:left">- First item <br> - Second item <br> - Third item</td></tr><tr><td style="text-align:left">代码</td><td style="text-align:left">`code`</td></tr><tr><td style="text-align:left">分割线</td><td style="text-align:left">---</td></tr><tr><td style="text-align:left">链接</td><td style="text-align:left">[title](<a href="https://www.example.com" target="_blank" rel="noopener">https://www.example.com</a>)</td></tr><tr><td style="text-align:left">图片</td><td style="text-align:left">![alt rext](image.jpg)</td></tr><tr><td style="text-align:left">表格</td><td style="text-align:left">&vert; Syntax &vert; Description &vert;<br> &vert; --------- &vert; --------- &vert;<br> &vert; Header &vert; Title &vert;<br> &vert; Paragraph &vert; Text &vert;</td></tr><tr><td style="text-align:left">分栏代码块</td><td style="text-align:left">```<br>{<br>“firstName”: John”,<br>“lastName”: “Smith”,<br>“age”: 25<br>}<br>```</td></tr><tr><td style="text-align:left">注释</td><td style="text-align:left">Here’s a sentence with a footnote. [^1]<br><br>[^1]: This is the footnote.</td></tr><tr><td style="text-align:left">删除线</td><td style="text-align:left">~~The world is flat.~~</td></tr><tr><td style="text-align:left">待办列表</td><td style="text-align:left">- [x] Write the press release <br> - [ ] Update the website</td></tr></tbody></table><a id="more"></a><hr><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>表格内换行在语句末尾加<code>&lt;br&gt;</code>即可</li><li><p>输入以下这些符号，需要在符号前加“\”进行转义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\</span><br><span class="line">`</span><br><span class="line">*</span><br><span class="line">_</span><br><span class="line">&#123;&#125;</span><br><span class="line">[]</span><br><span class="line">()</span><br><span class="line">#</span><br><span class="line">+</span><br><span class="line">-</span><br><span class="line">.</span><br><span class="line">!</span><br></pre></td></tr></table></figure></li><li><p>输入“|”，“\”转义无效，需要使用字符实体，以下方法任选其一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;verbar; </span><br><span class="line">&amp;vert; </span><br><span class="line">&amp;VerticalLine; </span><br><span class="line">&amp;#x0007C; </span><br><span class="line">&amp;#124;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Element&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Markdown Syntax&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;标题&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;# H1&lt;br&gt; ## H2 &lt;br&gt; ### H3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;粗体&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;**bold text**&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;斜体&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;*italicized text*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;引用&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&gt; blockquote&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;有序列表&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;1. First item &lt;br&gt; 2. Second item &lt;br&gt; 3. Third item&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;无序列表&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;- First item &lt;br&gt; - Second item &lt;br&gt; - Third item&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;代码&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;`code`&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;分割线&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;---&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;链接&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[title](&lt;a href=&quot;https://www.example.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.example.com&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;图片&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;![alt rext](image.jpg)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;表格&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;vert; Syntax &amp;vert; Description &amp;vert;&lt;br&gt; &amp;vert; --------- &amp;vert; --------- &amp;vert;&lt;br&gt; &amp;vert; Header &amp;vert; Title &amp;vert;&lt;br&gt; &amp;vert; Paragraph &amp;vert; Text &amp;vert;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;分栏代码块&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;```&lt;br&gt;{&lt;br&gt;“firstName”: John”,&lt;br&gt;“lastName”: “Smith”,&lt;br&gt;“age”: 25&lt;br&gt;}&lt;br&gt;```&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;注释&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Here’s a sentence with a footnote. [^1]&lt;br&gt;&lt;br&gt;[^1]: This is the footnote.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除线&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;~~The world is flat.~~&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;待办列表&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;- [x] Write the press release &lt;br&gt; - [ ] Update the website&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
    
      <category term="markdown" scheme="http://shifei.online/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>书籍资源整理</title>
    <link href="http://shifei.online/2019/01/03/books/"/>
    <id>http://shifei.online/2019/01/03/books/</id>
    <published>2019-01-02T19:48:14.034Z</published>
    <updated>2019-01-02T20:34:07.570Z</updated>
    
    <content type="html"><![CDATA[<p><em>整理部分质量较高的书籍资源，持续更新</em></p><h2 id="技术类"><a href="#技术类" class="headerlink" title="技术类"></a>技术类</h2><ol><li><p>Node.js.8.the.Right.Way.2018版  <a href="https://pan.baidu.com/s/1Z43JvxwRq5skV9V-GqVP4Q" target="_blank" rel="noopener">下载地址</a>  密码:k6af</p></li><li><p>深入浅出Node.js  <a href="https://pan.baidu.com/s/1NkwWzwodBbJHtyC9XoC0LA" target="_blank" rel="noopener">下载地址</a>  密码:4i3t</p></li><li><p>pro git  <a href="https://pan.baidu.com/s/1kAuzbyFf0-4Pi3cqvDRg6Q" target="_blank" rel="noopener">下载地址</a>  密码:d06p</p></li><li><p>Learning the bash Shell, 2nd Ed - 2Nd Edition  <a href="https://pan.baidu.com/s/1DYmiS7QkhelM7Wano9TeyQ" target="_blank" rel="noopener">下载地址</a>  密码:98o3</p></li><li><p>代码大全2  <a href="https://pan.baidu.com/s/1qxTUpFCTo5wl-mvw6fAUjQ" target="_blank" rel="noopener">下载地址</a>  密码:64he</p></li></ol><a id="more"></a><h2 id="杂书"><a href="#杂书" class="headerlink" title="杂书"></a>杂书</h2><ol><li><p>商务印书馆A类哲学本 153本  <a href="https://pan.baidu.com/s/1EEy3IQCBzlTbImi5GmHUsA" target="_blank" rel="noopener">下载地址</a>  密码:kvmx</p></li><li><p>红太阳是怎样升起的：延安整风运动的来龙去脉  <a href="https://u17766478.ctfile.com/fs/17766478-328721125" target="_blank" rel="noopener">下载地址</a></p></li><li><p>加缪全集（6册） <a href="https://pan.baidu.com/s/1YHhjheodUDHmIqjfdiaoRw" target="_blank" rel="noopener">下载地址</a>  密码:sn31</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;整理部分质量较高的书籍资源，持续更新&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;技术类&quot;&gt;&lt;a href=&quot;#技术类&quot; class=&quot;headerlink&quot; title=&quot;技术类&quot;&gt;&lt;/a&gt;技术类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Node.js.8.the.Right.Way.2018版  &lt;a href=&quot;https://pan.baidu.com/s/1Z43JvxwRq5skV9V-GqVP4Q&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;  密码:k6af&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;深入浅出Node.js  &lt;a href=&quot;https://pan.baidu.com/s/1NkwWzwodBbJHtyC9XoC0LA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;  密码:4i3t&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pro git  &lt;a href=&quot;https://pan.baidu.com/s/1kAuzbyFf0-4Pi3cqvDRg6Q&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;  密码:d06p&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learning the bash Shell, 2nd Ed - 2Nd Edition  &lt;a href=&quot;https://pan.baidu.com/s/1DYmiS7QkhelM7Wano9TeyQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;  密码:98o3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码大全2  &lt;a href=&quot;https://pan.baidu.com/s/1qxTUpFCTo5wl-mvw6fAUjQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;  密码:64he&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="resources" scheme="http://shifei.online/categories/resources/"/>
    
    
      <category term="books" scheme="http://shifei.online/tags/books/"/>
    
  </entry>
  
  <entry>
    <title>Linux 常用命令</title>
    <link href="http://shifei.online/2018/12/14/Linux-kb/"/>
    <id>http://shifei.online/2018/12/14/Linux-kb/</id>
    <published>2018-12-14T04:52:22.041Z</published>
    <updated>2018-12-14T08:28:25.311Z</updated>
    
    <content type="html"><![CDATA[<ol><li>进程<ul><li>查看占用某端口的程序： <code>lsof -i:xxxx</code></li><li>结束进程： <code>kill [PID]</code></li><li>查看某端口进程： <code>netstat -ant | grep [port]</code></li><li>查看某端口进程（包括pid）： <code>netstat -antp | grep [port]</code> （加p即可）</li><li>终止当前进程： <code>control-C</code></li></ul></li></ol><a id="more"></a><ol start="2"><li><p>文件</p><ul><li>显示当前目录的内容： <code>ls</code></li><li>查看隐藏内容： <code>ls -a</code></li><li>查看较多信息： <code>ll</code>（<code>ls -l</code> 的缩写）</li><li>显示路径的权限： <code>namei -om /[path]</code></li><li>查看文件运行路径： <code>which [filename]</code></li><li>查看文件安装路径： <code>whereis [filename]</code></li><li>执行脚本： <code>source [filename]</code> 或 <code>./[filename]</code></li><li>将文件变为可执行文件： <code>chmod +x [file-name]</code></li><li>清除到开头： <code>command-K</code></li><li>按照文件名查找： <code>find -[file-name]</code> （配合 xargs 能执行基本所以有的文件操作）</li><li>移动/重命名某个文件或文件夹： <code>mv [file/folder]</code></li><li>查看软件版本： <code>[software-name] -v</code> 或 <code>[software-name] --version</code></li></ul></li><li><p>网络</p><ul><li>查看IP： <code>ifconfig</code> （在 en0 的 inet）</li></ul></li><li><p>服务器</p><ul><li>ssh 免密登录服务器： <code>ssh-copy-id -p [port] [user]@[host]</code></li><li>ssh 指定某个公钥免密码登陆服务器 <code>ssh-copy-id -i [filename] -p [port] [user]@[host]</code>）</li><li>从远处复制文件到本地： <code>scp (-P [port]) [remote_username]@[remote_ip]:[remote-file] [local_path]</code></li><li>从远处复制文件夹到本地： （加一个参数r即可）<code>scp -r (-P [port]) [remote_username]@[remote_ip]:[remote-folder] [local_path]</code></li><li>从本地上传文件到远处： <code>scp [local_file] (-P [port]) [remote_user]@[remote_ip]:[remote_path]</code></li><li>从本地上传文件夹到远处： <code>scp -r [local_folder] (-P [port]) [remote_user]@[remote_ip]:[remote_path]</code></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;进程&lt;ul&gt;
&lt;li&gt;查看占用某端口的程序： &lt;code&gt;lsof -i:xxxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;结束进程： &lt;code&gt;kill [PID]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看某端口进程： &lt;code&gt;netstat -ant | grep [port]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看某端口进程（包括pid）： &lt;code&gt;netstat -antp | grep [port]&lt;/code&gt; （加p即可）&lt;/li&gt;
&lt;li&gt;终止当前进程： &lt;code&gt;control-C&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
      <category term="keyboard" scheme="http://shifei.online/categories/programing/keyboard/"/>
    
    
      <category term="keyboard" scheme="http://shifei.online/tags/keyboard/"/>
    
      <category term="Linux" scheme="http://shifei.online/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>VPS 服务端 CentOS + Nginx 结合本地 Hexo + Rsync 部署技术博客到独立域名的完整要点总结</title>
    <link href="http://shifei.online/2018/12/10/hexo/"/>
    <id>http://shifei.online/2018/12/10/hexo/</id>
    <published>2018-12-10T11:29:14.343Z</published>
    <updated>2018-12-14T10:56:06.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-既定为已购入-vps-和域名，这里只简述流程"><a href="#1-既定为已购入-vps-和域名，这里只简述流程" class="headerlink" title="1. 既定为已购入 vps 和域名，这里只简述流程"></a>1. 既定为已购入 vps 和域名，这里只简述流程</h3><p>在<a href="https://bwh1.net/" target="_blank" rel="noopener">bandwagon</a> 等上购买 vps，在 Kivi panel 设置好 vps 的配置，我安装的是 CentOS，在本地通过 ssh 连接能够成功连接到 vps 即可。在 <a href="https://www.namesilo.com/index.php" target="_blank" rel="noopener">namesilo</a> 等购买域名，根据需求设置域名的 DNS 解析，可以设置多个映射，也可以添加 email 等。这里需要添加刚部署好的 vps 主机地址。</p><a id="more"></a><p>因为购买的是国外 vps，所以需要将此 vps 解析才能在国内正常访问（如购买国内 vps 无需进行下步操作）。在 <a href="https://www.dnspod.cn/" target="_blank" rel="noopener">dnspod</a> 注册账户（一般如果只要支持博客免费账户即可），添加 vps 主机地址进行域名解析，并且这个网站提供有免费监控，根据需求设置即可。</p><p>完成这些步骤后，测试若在 VPS 上编辑内容，直接打开域名可查看这些内容即为成功。</p><h3 id="2-在本地安装-Node-和-Hexo，可成功访问到本地的临时-Hexo-页面即可"><a href="#2-在本地安装-Node-和-Hexo，可成功访问到本地的临时-Hexo-页面即可" class="headerlink" title="2. 在本地安装 Node 和 Hexo，可成功访问到本地的临时 Hexo 页面即可"></a>2. 在本地安装 Node 和 Hexo，可成功访问到本地的临时 Hexo 页面即可</h3><h3 id="3-服务端设置反向代理至独立域名"><a href="#3-服务端设置反向代理至独立域名" class="headerlink" title="3. 服务端设置反向代理至独立域名"></a>3. 服务端设置反向代理至独立域名</h3><p>在 Linux 上安装 EPEL 和 Nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install epel-release</span><br><span class="line">$ sudo yum install nginx</span><br></pre></td></tr></table></figure></p><p>安装过程中可能会遇到的问题在另一篇博客中列举，此处不赘述。</p><p>安装完成后启动 Nginx：<code>sudo systemctl start nginx</code>，此时访问 VPS 主机地址（不用写端口号）可看到 Nginx 的欢迎页。</p><p>下面进行 Nginx 的配置：</p><ul><li><p>新建文件夹，目的是存放这个博客页面需要的文件，这个文件夹地址可以随意设置，只要所有的配置文件注意地址统一即可，这里将文件存放在<code>/var/www/blog</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /var/www/blog</span><br></pre></td></tr></table></figure></li><li><p>在这个文件夹内新建<code>index.html</code>，用于测试，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Blog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>The Blog server block is successful<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置反向代理，即 Nginx 的配置文件</p><p>在 <code>/etc/nginx/conf.d</code> 新建配置文件 <code>blog.conf</code>（什么名字都可以）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">  <span class="attribute">root</span> /var/www/blog;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line">  <span class="attribute">server_name</span> shifei.online www.shifei.online;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启 Nginx，使新设定生效（不重启则无效）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><p>打开域名网址，如看到之前写的 html 页面则配置成功。</p></li></ul><h3 id="4-将本地-Hexo-部署到域名"><a href="#4-将本地-Hexo-部署到域名" class="headerlink" title="4. 将本地 Hexo 部署到域名"></a>4. 将本地 Hexo 部署到域名</h3><p>在两端分别安装 rsync， 服务端执行 <code>yum install rsync</code>，本地执行<code>npm install hexo-deployer-rsync --save</code>。</p><p>在本地的 Hexo 整体配置文件 <code>_config.yml</code> 中修改 ‘deploy’ 的设置，可参考如下配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span> </span><br><span class="line"><span class="attr">  type:</span> <span class="string">rsync</span></span><br><span class="line"><span class="attr">  host:</span> <span class="number">144.296</span><span class="number">.129</span><span class="number">.92</span>  <span class="comment"># VPS 地址</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">root</span>  <span class="comment"># VPS 登陆用户名</span></span><br><span class="line"><span class="attr">  root:</span> <span class="string">/var/www/blog</span>  <span class="comment"># 同步更新的所有页面存放文件夹</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">640</span>  <span class="comment"># VPS 端口号</span></span><br><span class="line"><span class="attr">  delete:</span> <span class="literal">true</span>  <span class="comment"># 删除远程主机上的旧文件</span></span><br><span class="line"><span class="attr">  verbose:</span> <span class="literal">true</span>  <span class="comment"># 显示调试信息</span></span><br><span class="line"><span class="attr">  ignore_errors:</span> <span class="literal">false</span>  <span class="comment"># 不忽略错误（前五项必填）</span></span><br></pre></td></tr></table></figure></p><p>部署完成，以后每次本地更新完博客内容后，执行 <code>hexo g -d</code> 即可推送至服务器，在服务端可以通过 <code>ssh-copy-id</code> 获得本地这台机器的证书，可以免密登陆（以免每次更新都要输入密码）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-既定为已购入-vps-和域名，这里只简述流程&quot;&gt;&lt;a href=&quot;#1-既定为已购入-vps-和域名，这里只简述流程&quot; class=&quot;headerlink&quot; title=&quot;1. 既定为已购入 vps 和域名，这里只简述流程&quot;&gt;&lt;/a&gt;1. 既定为已购入 vps 和域名，这里只简述流程&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://bwh1.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bandwagon&lt;/a&gt; 等上购买 vps，在 Kivi panel 设置好 vps 的配置，我安装的是 CentOS，在本地通过 ssh 连接能够成功连接到 vps 即可。在 &lt;a href=&quot;https://www.namesilo.com/index.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;namesilo&lt;/a&gt; 等购买域名，根据需求设置域名的 DNS 解析，可以设置多个映射，也可以添加 email 等。这里需要添加刚部署好的 vps 主机地址。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
    
      <category term="hexo" scheme="http://shifei.online/tags/hexo/"/>
    
      <category term="vps" scheme="http://shifei.online/tags/vps/"/>
    
      <category term="domain" scheme="http://shifei.online/tags/domain/"/>
    
      <category term="nginx" scheme="http://shifei.online/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>centos 安装 nginx 时提示‘No package nginx available‘或’Nothing to do‘</title>
    <link href="http://shifei.online/2018/12/10/nginx%E9%94%99%E8%AF%AF/"/>
    <id>http://shifei.online/2018/12/10/nginx错误/</id>
    <published>2018-12-10T07:07:24.545Z</published>
    <updated>2018-12-13T18:58:57.296Z</updated>
    
    <content type="html"><![CDATA[<p>出现该问题的原因是本地 yum 源中没有 nginx，需要创建一个 ‘/etc/yum.repos.d/nginx.repo’ 文件，新增一个 yum 源</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@144 ~]<span class="comment"># vim /etc/yum.repos.d/nginx.repo</span></span><br><span class="line"><span class="comment">#在文件中写入以下内容：</span></span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;出现该问题的原因是本地 yum 源中没有 nginx，需要创建一个 ‘/etc/yum.repos.d/nginx.repo’ 文件，新增一个 yum 源&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
    
      <category term="nginx" scheme="http://shifei.online/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>台湾九合一选举之思</title>
    <link href="http://shifei.online/2018/12/10/taiwan/"/>
    <id>http://shifei.online/2018/12/10/taiwan/</id>
    <published>2018-12-09T18:57:01.747Z</published>
    <updated>2018-12-17T00:19:16.795Z</updated>
    
    <content type="html"><![CDATA[<h3 id="台湾九合一选举之思"><a href="#台湾九合一选举之思" class="headerlink" title="台湾九合一选举之思"></a>台湾九合一选举之思</h3><p>从半个多月前选举直播开始关注这次选举，逐渐对台湾的选举制度和一些政客有一些粗浅的了解，就算不能做到完全中立，还是尽量保持客观的角度谈论我的看法，并由浅及深，寻找问题的根源在何处。</p><a id="more"></a><p>凭良心讲，这几天一直在疑惑到底为什么竟有半数的人不会支持柯文哲这种人，踏实做事，不搞政治，不求名利，台北市支持率反而是台湾垫底，仅仅是因为触碰了某些人的利益么？难道说他的所作所为老百姓都不是有目共睹的吗？宁愿选择空口白话的政治家上台都不要这样24*7来为台湾未来着想的人吗？</p><p>今天下午蔡柯会，看完之后这个苦恼真的让我烦到顶峰，心里烦得很，什么都做不下去，随意翻着一些早期的视频，还是烦躁，出去篼个风，冷风一吹，一个非常大胆的想法迸发出来，并且按着这样推理下去，似乎所有问题都迎刃而解了，不过这些问题更深层次的根源让人想了越发沉重。</p><p>既然选举时会有很多出格和疯狂的举动，如果说所有的黑料全是假的呢？14年就已经见识过了，没有办法，团队从各个角度来讲实力都相差悬殊，今年更甚，网络这招已经不管用了，顺便说一句奉劝想找网红各位用多了就烂了；其次，为了选举，政客真的没有底线，是完全没有底线的，从柯p这边来看，起码没有故意抹黑，人心险恶，可以用更险恶去打败，但有些人选择不去做。这里我并不是一味的脑残粉一样去盲目的喜欢或相信，有一件事，我可以说是绝无可能的，就是柯文哲和大陆联合活摘器官这件事。</p><p>说到活摘，真的笑出声了，我真的感谢台湾的媒体这么高估内地的医院，如此的有人性。不是说台湾的媒体无知，因为整体的舆论氛围相比大陆来讲是很开放，没有太多的是非观念，什么事情张口就来，没有过调查，也常被当作利用工具，不会像大陆一般的限制多多，这个不能讲那个不许讲，但是我头一次发现什么都能讲也不见得都是好事。</p><p>关于内地的活摘，我研究了很长时间，不是光凭这边或者那边的几个漏洞百出的视频或者文章就断定出的，到现在，我差不多可以下一个结论：活摘在大陆存在（过）的可能性是很大的。可能早起或许是跟轮子有关系，后来可能更多是死囚吧，但是希望所有人能了解，到目前，大陆同胞的就医质量相对还是比较低的，当然了我说的是平民老百姓，有钱人另当别论。多少人就因为交不起那几百几千的急诊费用死在医院的？又多了多少起伤医暴力事件？看病需要多少红包才能治好？当然我也不是说医生不负责任，只是现在社会发展种种原因导致这种现状，医生压力过不得不如此，为避免长篇累牍这里暂且不论。总而言之，内地的普通市民在医院里的人权是很低的，我们对医生也没有什么期待。对于法轮功或者死囚就更不必说了，没有人会在乎的，至于所谓的使用叶克膜活摘器官，更是无稽之谈。首先，没有人会在乎他们的生命、死活，这些人，说实话本来也是命不久矣（不是该死，而是分析当时的情况得出结论，毕竟没有人会蠢到把这些人活着放出去散布传言不是？）；其次，难道你们觉得会有医院和医生肯为将死之人使用这么昂贵的技术把所有的钱打水漂而宁可不去救治其他的能支付医疗费用的病人？他们舍得的话也不会枉死那么多的穷人。我明明知道是假的，但是一厢情愿希望是真的，因为我也想要有人情味的医生，和一个真正和谐的社会，而不是一个被和谐的社会。</p><p>多党制，开放的社会舆论，初来乍到时确实觉得新鲜、渴望，可是这种开放衍生出的是什么？不顾是非，颠倒黑白，毫无原则，毫无底线，随意操弄，我突然发现，竟然真的一个地方会长期的做到这样，台湾，而这么多年过去，人们似乎也并无意识，呵，或许我也是五十步笑百步罢了。</p><p>每一种行为、每一种选择都各有利弊，总在两个极端之间寻找平衡。当这个平衡慢慢倾斜，滑向任意一边，终究会引起反抗和改革。不过台湾很幸运，这么早就开始了，大陆还有的徘徊吧。我想今天心情烦闷的原因大概是我发现，柯p竞选2020的前景更偏于暗淡，不是消沉，而是各种现实显示的，原因上文已经提过不再赘述。这种人选不上总统，是注定的，改革是需要时间的，群体的思想转变需要很长时间。反过来讲，内地不是也没有这种人，一是不会或不许宣传，二是这些人多半在某处就被打压，要么无甚官职，要么尸骨无存，想要突围，这条路比台北要难得多得多了。台湾或许几代人，那么大陆可能要几十代人才能得见。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;台湾九合一选举之思&quot;&gt;&lt;a href=&quot;#台湾九合一选举之思&quot; class=&quot;headerlink&quot; title=&quot;台湾九合一选举之思&quot;&gt;&lt;/a&gt;台湾九合一选举之思&lt;/h3&gt;&lt;p&gt;从半个多月前选举直播开始关注这次选举，逐渐对台湾的选举制度和一些政客有一些粗浅的了解，就算不能做到完全中立，还是尽量保持客观的角度谈论我的看法，并由浅及深，寻找问题的根源在何处。&lt;/p&gt;
    
    </summary>
    
      <category term="thoughts" scheme="http://shifei.online/categories/thoughts/"/>
    
    
      <category term="Taiwan" scheme="http://shifei.online/tags/Taiwan/"/>
    
  </entry>
  
  <entry>
    <title>VS Code 常用快捷键</title>
    <link href="http://shifei.online/2018/12/02/vs-kb/"/>
    <id>http://shifei.online/2018/12/02/vs-kb/</id>
    <published>2018-12-01T21:59:29.619Z</published>
    <updated>2019-01-26T07:17:17.844Z</updated>
    
    <content type="html"><![CDATA[<ol><li>显示/隐藏 problem panel：Shift + Cmd + M</li><li>显示/隐藏 panel： Cmd + J</li><li>显示/隐藏 side bar： Cmd + B</li><li>显示/隐藏 activity bar（最左）（自定义）：Cmd + K Cmd + H</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;显示/隐藏 problem panel：Shift + Cmd + M&lt;/li&gt;
&lt;li&gt;显示/隐藏 panel： Cmd + J&lt;/li&gt;
&lt;li&gt;显示/隐藏 side bar： Cmd + B&lt;/li&gt;
&lt;li&gt;显示/隐藏 activity bar（最左）（
      
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
      <category term="keyboard" scheme="http://shifei.online/categories/programing/keyboard/"/>
    
    
      <category term="keyboard" scheme="http://shifei.online/tags/keyboard/"/>
    
      <category term="VS Code" scheme="http://shifei.online/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>代码规范</title>
    <link href="http://shifei.online/2018/10/19/standard/"/>
    <id>http://shifei.online/2018/10/19/standard/</id>
    <published>2018-10-19T12:06:48.102Z</published>
    <updated>2018-12-13T19:00:24.464Z</updated>
    
    <content type="html"><![CDATA[<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><ol><li><p>函数签名部分有空格，函数名与小括号之间不需要空格，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> y = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>在 if、while 等控制语句后，即小括号前需要空格，参数列表和函数名之间不空格，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isJedi) &#123;</span><br><span class="line">  fight();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小括号内不加空格：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">foo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方括号内不加空格，逗号分隔符后加空格，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li><li><p>大括号内外都加空格：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;;</span><br></pre></td></tr></table></figure></li><li><p>对象的字面量属性，即 key-value 之间需要空格，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">"foo"</span>: <span class="number">42</span> &#125;;</span><br></pre></td></tr></table></figure></li></ol><p><strong>总结</strong></p><ul><li>需要空格：function、if 与小括号之间、大括号内外、key-value、行末</li><li>不需要空格：函数名、参数与小括号之间、小括号内、方括号内、调用函数时</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;空格&quot;&gt;&lt;a href=&quot;#空格&quot; class=&quot;headerlink&quot; title=&quot;空格&quot;&gt;&lt;/a&gt;空格&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;函数签名部分有空格，函数名与小括号之间不需要空格，如下&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; x = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; y = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
    
      <category term="standard" scheme="http://shifei.online/tags/standard/"/>
    
  </entry>
  
  <entry>
    <title>Git 总结</title>
    <link href="http://shifei.online/2018/10/18/Git%E6%80%BB%E7%BB%93/"/>
    <id>http://shifei.online/2018/10/18/Git总结/</id>
    <published>2018-10-18T15:19:40.101Z</published>
    <updated>2019-01-10T17:41:57.666Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><hr><h3 id="错误提示解决方案"><a href="#错误提示解决方案" class="headerlink" title="错误提示解决方案"></a>错误提示解决方案</h3><ol><li><p>提示<code>warning: CRLF will be replaced by LF in XXX . The file will have its original line endings in your working directory.</code></p><p> <strong>解决方法</strong> <code>git config core.autocrlf false</code>（关闭自动转换）</p></li></ol><a id="more"></a><ol start="2"><li><p>提示如下</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fatal: <span class="string">'origin'</span> does not appear to be a git repository</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository</span><br></pre></td></tr></table></figure></li></ol><p><strong>解决方法</strong> <code>git remote add origin &lt;url&gt;</code></p><ol start="3"><li><p>‘push’ 时遇到版本问题（如远程主机的版本比本地的新，又不想使用‘pull’做合并再推送时），可使用强制推送：<code>git push -f origin master</code>，该命令会覆盖远程主机版本，慎用。</p></li><li><p>Git 删除远程文件或文件夹，并且保留本地文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached filename/-r directory</span><br><span class="line">git commit -m <span class="string">"remove file/directory"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="生僻用法"><a href="#生僻用法" class="headerlink" title="生僻用法"></a>生僻用法</h3><ol><li>使用 <code>git add [filename] -e</code> 可以查看并修改过的内容，在使用本代码后会进入 vim 模式并显示 diff 信息，例如： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/feature.rb b/feature.rb   <span class="comment"># 比较的本件, Git 自动命名为a、b</span></span><br><span class="line">index 1a271e9..4a80dda 100644  <span class="comment"># 元数据，1a271e9 和 4a80dda 代表两个文件的哈希值，最后的数字代表文件模式（100644 表示普通文件，100755 表示可执行文件， 120000 表示符号链接）</span></span><br><span class="line">--- a/feature.rb  <span class="comment"># 文件标记</span></span><br><span class="line">+++ b/feature.rb  <span class="comment"># 同上</span></span><br><span class="line">@@ -1 +1,3 @@  <span class="comment"># 从本行起至末尾为一个改动区块，本行为区块头，来自文件 a 的标记为‘-’，来自文件 b 的标记为‘+’，意思是从第一行开始的3行代码</span></span><br><span class="line">this is the class of my feature  <span class="comment"># 上下文环境</span></span><br><span class="line">+This change belongs to the first feature  <span class="comment"># 改动，‘+’表示 b 新增加的内容</span></span><br><span class="line">+This change belongs to the second feature  <span class="comment"># 同上</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&quot;错误提示解决方案&quot;&gt;&lt;a href=&quot;#错误提示解决方案&quot; class=&quot;headerlink&quot; title=&quot;错误提示解决方案&quot;&gt;&lt;/a&gt;错误提示解决方案&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;提示&lt;code&gt;warning: CRLF will be replaced by LF in XXX . The file will have its original line endings in your working directory.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;解决方法&lt;/strong&gt; &lt;code&gt;git config core.autocrlf false&lt;/code&gt;（关闭自动转换）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
    
      <category term="Git" scheme="http://shifei.online/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 简介及使用</title>
    <link href="http://shifei.online/2018/07/05/nginx/"/>
    <id>http://shifei.online/2018/07/05/nginx/</id>
    <published>2018-07-04T20:28:24.000Z</published>
    <updated>2018-12-13T18:59:42.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LNMP"><a href="#LNMP" class="headerlink" title="LNMP"></a>LNMP</h2><p><strong>1.简介</strong></p><p>工作中常会需要多个容器相互配合来完成某项任务，如实现一个web项目，需要web服务器、数据库服务器、负载均衡等，使用docker逐个构建则任务繁重。Compose是docker官方的开源项目，定义和运行多个docker容器的应用，能实现对docker容器集群的快速编排，定义一组相关联的容器为一个项目。</p><a id="more"></a><p>LNMP（LEMP）即Linux + Nginx + MySQL + PHP 的服务器架构，与LAMP相比，Nginx性能更强，资源占用少，效率更高。</p><p>LNMP的实现原理：</p><ul><li>浏览器发送http请求到服务器（Nginx），服务器响应并处理web请求，将静态资源保存在服务器</li><li>PHP脚本通过接口传输协议（网关协议）php-fcgi传输给php-fpm（进程管理程序）,PHP-FPM不做处理，然后PHP-FPM调用PHP解析器进程，PHP解析器解析php脚本信息。PHP解析器进程可以启动多个，进行并发执行。</li><li>将解析后的脚本返回到PHP-FPM，PHP-FPM再通过fast-cgi的形式将脚本信息传送给Nginx。</li><li>服务器再通过Http response的形式传送给浏览器。浏览器再进行解析与渲染然后进行呈现。</li></ul><p><img src="https://github.com/bravist/lnmp-docker/raw/master/docker.png" alt="流程图"></p><p><strong>2.使用</strong></p><ul><li>环境准备<br>docker</li><li>docker-compose的简单配置<br>在目标文件夹内创建docker-compose.yml</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line">version: <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">    <span class="comment"># Web server</span></span><br><span class="line">    Nginx:</span><br><span class="line">        image: nginx:latest</span><br><span class="line">        ports:</span><br><span class="line">            - <span class="number">23333</span>:<span class="number">80</span></span><br><span class="line">        depends_on:</span><br><span class="line">            - php</span><br><span class="line">        volumes:</span><br><span class="line">            - ./images/nginx/config:/etc/nginx/conf.d:ro</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PHP</span></span><br><span class="line">    php:</span><br><span class="line">        image: php:latest</span><br><span class="line">        build:</span><br><span class="line">            <span class="comment"># Dockerfile所在的文件目录和文件名</span></span><br><span class="line">            context: ./images/php</span><br><span class="line">            dockerfile: Dockerfile</span><br><span class="line">        volumes:</span><br><span class="line">            - ./apps:/mnt/apps</span><br><span class="line"></span><br><span class="line">    <span class="comment"># database</span></span><br><span class="line">    MySQL:</span><br><span class="line">        image: mysql:latest</span><br><span class="line">        ports:</span><br><span class="line">    - <span class="number">3306</span>:<span class="number">3306</span></span><br><span class="line">        <span class="comment"># 配置环境变量</span></span><br><span class="line">        environment:</span><br><span class="line">            RACK_ENV: development</span><br><span class="line">            MYSQL_ROOT_PASSWORD: <span class="string">'root'</span></span><br><span class="line">            MYSQL_USER: <span class="string">'root'</span></span><br><span class="line">            MYSQL_PASSWORD: <span class="string">'passwd'</span></span><br><span class="line">        volumes:</span><br><span class="line">            - ./database:/var/lib/mysql</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 便于命令工具操作项目文件</span></span><br><span class="line">    console:</span><br><span class="line">build:</span><br><span class="line">    context: ~/workspace/lnmp/images/console</span><br><span class="line">    dockerfile: /Users/eric/workspace/lnmp/images/php/Dockerfile</span><br><span class="line">tty: true</span><br></pre></td></tr></table></figure><p>在docker-compose.yml中改变Nginx映射的配置目录，在新目录下增加配置default.conf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default.conf</span></span><br><span class="line"><span class="comment"># 虚拟主机配置</span></span><br><span class="line">server&#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name localhost;<span class="comment"># 域名</span></span><br><span class="line">    root /mnt/apps;<span class="comment"># 站点目录</span></span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.php index.html;</span><br><span class="line">        try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">    fastcgi_pass php:<span class="number">9000</span>;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加Dockerfile，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line">FROM php:<span class="number">7.2</span>-fpm</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y pdo pdo_mysql pdo_pgsql \</span><br><span class="line">    &amp;&amp; docker-php-ext-install pdo \</span><br><span class="line">    &amp;&amp; docker-php-ext-install pdo_mysql \</span><br><span class="line">    &amp;&amp; docker-php-ext-install pdo_pgsql</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">        libfreetype6-dev \</span><br><span class="line">        libjpeg62-turbo-dev \</span><br><span class="line">        libmcrypt-dev \</span><br><span class="line">        libpng-dev \</span><br><span class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) iconv mcrypt \</span><br><span class="line">    &amp;&amp; docker-php-ext-configure gd --<span class="keyword">with</span>-freetype-dir=/usr/include/ --<span class="keyword">with</span>-jpeg-dir=/usr/include/ \</span><br><span class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) gd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 composer</span></span><br><span class="line">RUN curl -o composer.phar https://getcomposer.org/download/<span class="number">1.4</span><span class="number">.1</span>/composer.phar \</span><br><span class="line">    &amp;&amp; chmod +x composer.phar</span><br></pre></td></tr></table></figure><p><strong>3.安装及设置</strong></p><ul><li><p>创建容器<br>在Dockerfile的目录中运行命令<code>docker-compose up --build -d</code>,运行后docker会有四个容器运行。原目录下有三个子目录：apps用于存放项目文件，database是mySQL的数据库映射，images存放Dockerfile等配置文件。</p></li><li><p>测试</p><ul><li><p>Nginx与PHP</p><p> 可在项目中的apps目录下添加test.php（如下）测试环境，容器运行后打开127.0.0.1:23333/test.php，如成功则显示当前安装的PHP版本和所有配置信息。</p></li><li><p>PHP与mySQL</p><p> 在同上位置添加test-mysql.php，内容如下：</p></li></ul></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test-mysql.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dbms=<span class="string">'mysql'</span>;   <span class="comment">//数据库类型</span></span><br><span class="line">$host=<span class="string">'localhost'</span>; <span class="comment">//数据库主机名</span></span><br><span class="line">$dbName=<span class="string">'mysql'</span>;    <span class="comment">//使用的数据库</span></span><br><span class="line">$user=<span class="string">'sf'</span>;      <span class="comment">//数据库连接用户名</span></span><br><span class="line">$pass=<span class="string">'passwd'</span>;          <span class="comment">//对应的密码</span></span><br><span class="line">$dsn=<span class="string">"$dbms:host=$host;dbname=$dbName"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $dbh = <span class="keyword">new</span> PDO($dsn, $user, $pass); <span class="comment">//初始化一个PDO对象</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"连接成功&lt;br/&gt;"</span>;</span><br><span class="line">    $dbh = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">die</span> (<span class="string">"Error!: "</span> . $e-&gt;getMessage() . <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如需长链接如下</span></span><br><span class="line"><span class="comment">// $db = new PDO($dsn, $user, $pass, array(PDO::ATTR_PERSISTENT =&gt; true));</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>删除容器<br> 无需该环境时即可销毁容器，运行<code>docker-compose down</code>。</li></ul><p><strong>4.注意（坑）</strong></p><ul><li>yaml不允许tab替换空格</li><li>dockerfile构建的路径为绝对路径</li><li>php5以上版本已经废除mysql_connect()方法</li></ul><h2 id="使用Nginx"><a href="#使用Nginx" class="headerlink" title="使用Nginx"></a>使用Nginx</h2><p><strong>1.简介</strong></p><p>Nginx是异步框架的Web服务器，同时可用作反向代理、负载平衡器和HTTP缓存。</p><p>Nginx是面向性能设计的HTTP服务器，相较于Apache、lighttpd具有占有内存少，稳定性高等优势。而且在实际工作中，Nginx可以支持二万到四万个并行链接。</p><p><strong>2.docker与Nginx的配置</strong></p><ul><li>安装：通过<code>docker run -p 127.0.0.1:3423:80 --name mynginx -d nginx</code>下载并运行Nginx容器，如成功安装运行，打开127.0.0.1:3423即可看见Nginx欢迎页。</li><li>停止：<code>docker container stop mynginx</code>，在安装时设置了删除参数，容器终止后容器文件会自动删除</li><li>修改映射网页目录：新建并如下目录，新建index.html，将子目录映射到容器的目录，代码如下，然后打开127.0.0.1:9384，看到Hello World。（IP写成127.0.0.1:[四位数字]，否则容易报错）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir nginx-docker-demo</span><br><span class="line">$ <span class="built_in">cd</span> nginx-docker-demo</span><br><span class="line">$ mkdir html</span><br><span class="line">$ emacs index.html</span><br><span class="line">$ &lt;h1&gt;Hello World&lt;/h1&gt;</span><br><span class="line">$ docker run -d -p 127.0.0.1:9384:80 --rm --name mynginx --volume <span class="variable">$PWD</span>/html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure><ul><li>拷贝配置：将容器里的Nginx配置文件复制到本地</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container cp mynginx:/etc/nginx .</span><br></pre></td></tr></table></figure><ul><li>映射配置目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run  --rm --name mynginx --volume <span class="variable">$PWD</span>/html:/usr/share/nginx/html --volume <span class="variable">$PWD</span>/conf.d:/etc/nginx -p 127.0.0.1:4023:80 -d nginx</span><br></pre></td></tr></table></figure></li></ul><p><strong>3.反向代理</strong></p><ul><li><p>概念</p><p>反向代理方式是指用代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p>例如，用户访问 <a href="http://www.example.com/readme" target="_blank" rel="noopener">http://www.example.com/readme</a>，但是 <a href="http://www.example.com" target="_blank" rel="noopener">http://www.example.com</a> 上并不存在 readme 页面，它是偷偷从另外一台服务器上取回来，然后作为自己的内容返回给用户。但是用户并不知情这个过程。对用户来说，就像是直接从 <a href="http://www.example.com" target="_blank" rel="noopener">http://www.example.com</a> 获取 readme 页面一样。这里的 <a href="http://www.example.com" target="_blank" rel="noopener">http://www.example.com</a> 这个域名对应的服务器就设置了反向代理功能。</p><p>反向代理服务器，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。如下图所示：</p><p><img src="https://moonbingbing.gitbooks.io/openresty-best-practices/images/proxy.png" alt="反向代理"></p></li><li><p>应用</p><p>反向代理的典型用途是将防火墙后面的服务器提供给 Internet 用户访问，加强安全防护。反向代理还可以为后端的多台服务器提供负载均衡，或为后端较慢的服务器提供缓 服务。另外，反向代理还可以启用高级 URL 策略和管理技术，从而使处于不同 web 服务器系统的 web 页面同时存在于同一个 URL 空间下。</p><p>本地访问 <a href="http://localhost/deno" target="_blank" rel="noopener">http://localhost/deno</a> 时服务器进行反向代理，从 <a href="https://github.com/ry/deno" target="_blank" rel="noopener">https://github.com/ry/deno</a> 获取页面内容，添加nginx.conf到Nginx配置目录，生效后运行服务器打开 <a href="http://localhost/deno" target="_blank" rel="noopener">http://localhost/deno</a> 会打开 <a href="https://github.com/ry/deno" target="_blank" rel="noopener">https://github.com/ry/deno</a>，代码如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">worker_process <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">pid logs/nginx.pid;</span><br><span class="line">error_log logs/error.log warn;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections <span class="number">3000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    server_tokens off;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向代理</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass       https://github.com;</span><br><span class="line">            proxy_redirect   off;</span><br><span class="line">            proxy_set_header Host            $host;</span><br><span class="line">            proxy_set_header X-Real-IP       $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    location /deno &#123;</span><br><span class="line">        proxy_set_header X-Real-IP       $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass       https://github.com/ry/deno;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>正向代理</p><p>正向代理好比一个跳板，当用户访问不了某网站时，能够访问一个代理服务器，通过连接代理服务器，告诉他需要的访问内容，代理服务器拉取给用户，翻墙工具、游戏代理都是正向代理。</p></li></ul><p><strong>4.负载均衡</strong></p><p>负载均衡是一种计算机网络技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁盘驱动器或其他资源中分配负载，以达到最佳化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。</p><p>使用带有负载均衡的多个服务器组件，取代单一的组件，可以通过冗余提高可靠性。负载均衡服务通常是由专用软体和硬件来完成。</p><p>负载均衡最重要的一个应用是利用多台服务器提供单一服务，这种方案有时也称之为服务器农场。通常，负载均衡主要应用于 Web 网站，大型的 Internet Relay Chat 网络，高流量的文件下载网站，NNTP 服务和 DNS 服务。现在负载均衡器也开始支持数据库服务，称之为数据库负载均衡器。</p><p>对于互联网服务，负载均衡器通常是一个软体程序，这个程序侦听一个外部端口，互联网用户可以通过这个端口来访问服务，而作为负载均衡器的软体会将用户的请求转发给后台内网服务器，内网服务器将请求的响应返回给负载均衡器，负载均衡器再将响应发送到用户，这样就向互联网用户隐藏了内网结构，阻止了用户直接访问后台（内网）服务器，使得服务器更加安全，可以阻止对核心网络栈和运行在其它端口服务的攻击。</p><p>当所有后台服务器出现故障时，有些负载均衡器会提供一些特殊的功能来处理这种情况。例如转发请求到一个备用的负载均衡器、显示一条关于服务中断的消息等。负载均衡器使得 IT 团队可以显著提高容错能力。它可以自动提供大量的容量以处理任何应用程序流量的增加或减少。</p><p>在 Nginx 中，HTTP Upstream 模块负责负载均衡，这个模块通过一个简单的调度算法来实现客户端 IP 到后端服务器的负载均衡。在如下的设定中，通过 upstream 指令指定了一个负载均衡器的名称 test.net。这个名称可以任意指定，在后面需要用到的地方直接调用即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">upstream test.net&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server <span class="number">192.168</span><span class="number">.10</span><span class="number">.13</span>:<span class="number">80</span>;</span><br><span class="line">    server <span class="number">192.168</span><span class="number">.10</span><span class="number">.14</span>:<span class="number">80</span>  down;</span><br><span class="line">    server <span class="number">192.168</span><span class="number">.10</span><span class="number">.15</span>:<span class="number">8009</span>  max_fails=<span class="number">3</span>  fail_timeout=<span class="number">20</span>s;</span><br><span class="line">    server <span class="number">192.168</span><span class="number">.10</span><span class="number">.16</span>:<span class="number">8080</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass  http:<span class="comment">//test.net;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Nginx配置负载均衡</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream webservers &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server <span class="number">192.168</span><span class="number">.18</span><span class="number">.201</span> weight=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">2</span>;</span><br><span class="line">    server <span class="number">192.168</span><span class="number">.18</span><span class="number">.202</span> weight=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">2</span>;</span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span> backup;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass      http:<span class="comment">//webservers;</span></span><br><span class="line">        proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重新加载配置文件后，访问该地址时发现上述两个IP是交替出现的，达到负载均衡效果</li><li>利用max_fails、fail_timeout参数控制异常情况</li><li>当所有服务器都停止工作时启动备份服务器</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">8080</span>;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    root /data/www/errorpage;</span><br><span class="line">    index index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># cat index.html</span></span><br><span class="line">&lt;h1&gt;Sorry......&lt;/h1&gt;</span><br></pre></td></tr></table></figure><ul><li>当算法为ip_hash时，负载均衡调度的状态不能有backup</li></ul><h1 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h1>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LNMP&quot;&gt;&lt;a href=&quot;#LNMP&quot; class=&quot;headerlink&quot; title=&quot;LNMP&quot;&gt;&lt;/a&gt;LNMP&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;工作中常会需要多个容器相互配合来完成某项任务，如实现一个web项目，需要web服务器、数据库服务器、负载均衡等，使用docker逐个构建则任务繁重。Compose是docker官方的开源项目，定义和运行多个docker容器的应用，能实现对docker容器集群的快速编排，定义一组相关联的容器为一个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
    
      <category term="nginx" scheme="http://shifei.online/tags/nginx/"/>
    
      <category term="lnmp" scheme="http://shifei.online/tags/lnmp/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2 常用命令</title>
    <link href="http://shifei.online/2018/07/05/iTerm2-kb/"/>
    <id>http://shifei.online/2018/07/05/iTerm2-kb/</id>
    <published>2018-07-04T20:21:20.000Z</published>
    <updated>2018-12-14T05:10:32.007Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>自动补全命令： <code>Cmd-Shift-;</code></p></li><li><p>显示输入历史： <code>Cmd-Shif-h</code></p></li><li><p>显示所有窗口： <code>Cmd-Option-e</code></p></li><li><p>新建Tab：<code>Cmd-T</code></p></li><li><p>切换Tab： <code>Cmd-左/右</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;自动补全命令： &lt;code&gt;Cmd-Shift-;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;显示输入历史： &lt;code&gt;Cmd-Shif-h&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;显示所有窗口： &lt;code&gt;Cmd-Option-e&lt;/c
      
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
      <category term="keyboard" scheme="http://shifei.online/categories/programing/keyboard/"/>
    
    
      <category term="keyboard" scheme="http://shifei.online/tags/keyboard/"/>
    
      <category term="iTerm2" scheme="http://shifei.online/tags/iTerm2/"/>
    
  </entry>
  
  <entry>
    <title>Docker 常用命令</title>
    <link href="http://shifei.online/2018/07/05/docker-kb/"/>
    <id>http://shifei.online/2018/07/05/docker-kb/</id>
    <published>2018-07-04T20:21:20.000Z</published>
    <updated>2018-12-14T05:58:38.254Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>查看所有镜像： <code>docker image ls</code></p></li><li><p>查看所有镜像（包括ID）： <code>docker images -a</code></p></li><li><p>删除镜像（通过ID）： <code>docker rmi [id]</code></p></li><li><p>进入容器： <code>docker exec -it [container-id] bash</code></p></li><li><p>停止运行容器： <code>docker stop [container-id]</code></p></li><li><p>查看运行中的容器： <code>docker ps</code></p></li><li><p>查看所有容器： <code>docker ps -a</code></p></li><li><p>删除容器： <code>docker rm [container id]</code></p></li><li><p>查看某容器的信息（IP等）： <code>docker inspect [container-name]</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看所有镜像： &lt;code&gt;docker image ls&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看所有镜像（包括ID）： &lt;code&gt;docker images -a&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除镜像（通过ID）： &lt;
      
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
      <category term="keyboard" scheme="http://shifei.online/categories/programing/keyboard/"/>
    
    
      <category term="keyboard" scheme="http://shifei.online/tags/keyboard/"/>
    
      <category term="Docker" scheme="http://shifei.online/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令</title>
    <link href="http://shifei.online/2018/07/05/Git-kb/"/>
    <id>http://shifei.online/2018/07/05/Git-kb/</id>
    <published>2018-07-04T20:21:20.000Z</published>
    <updated>2018-12-14T05:10:16.381Z</updated>
    
    <content type="html"><![CDATA[<ol><li>常规上传步骤<ol><li>建立本地仓库 <code>git init</code></li><li>添加文件到暂存区： <code>git add [filename]</code></li><li>暂存区文件提交到本地仓库： <code>git commit -m &#39;xxx&#39;</code> </li><li>关联本地仓库至GitHub仓库：<code>git remote add origin [url]</code></li><li>上传本地仓库文件至GitHub远程仓库:  <code>git push -u origin master</code> </li><li>再更改代码上传至远程仓库使用：<code>git push</code></li></ol></li></ol><a id="more"></a><ol start="2"><li><p>分支相关</p><ol><li>新建并切换到本地分支： <code>git checkout -b [branch]</code> （相当于 <code>git branch [branch]</code> + <code>git checkout [branch]</code>）</li><li>添加文件： <code>git add .</code></li><li>提交到本地： <code>git commit -m &#39;xxx&#39;</code></li><li>关联并上传至远程仓库分支： <code>git push --set-upstream origin [branch]</code></li><li>常用命令：<ul><li>查看本地所有分支： <code>git branch -r</code> </li><li>查看所有分支： <code>git branch -a</code></li><li>查看远程仓库： <code>git remote</code></li><li>删除分枝： <code>git branch -d [branch]</code></li><li>切换远程分支： <code>git checkout [branch]</code></li><li>查看远程仓库的信息： <code>git remote show [remote]</code></li><li>强制上传到远程： <code>git push -f origin [branch]</code></li></ul></li></ol></li><li><p>查看本地仓库<strong>状态</strong>： <code>git status</code></p></li><li>查看已有的<strong>配置</strong>信息： <code>git config --list</code></li><li>设置默认文本编辑器： <code>git config --global core.editor [name]</code></li><li><strong>删除</strong>git本地仓库： <code>rm -rf .git</code></li><li>查询是否使用<strong>代理</strong>： <code>git config --global http.proxy</code></li><li>取消代理： <code>git config --global --unset http.proxy</code></li><li><strong>回滚</strong>最近一次操作： <code>git reset --soft HEAD^</code></li><li><strong>撤销</strong>本地所有<strong>修改</strong>： <code>git checkout .</code></li><li><strong>撤销上一次提交</strong>的所有内容： <code>git reset HEAD [file-name/为空则为所有文件]</code></li><li>查看自己 GitHub 并修改账号信息： <code>curl -i -u username:token https://api.github.com/user</code> </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;常规上传步骤&lt;ol&gt;
&lt;li&gt;建立本地仓库 &lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加文件到暂存区： &lt;code&gt;git add [filename]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;暂存区文件提交到本地仓库： &lt;code&gt;git commit -m &amp;#39;xxx&amp;#39;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;关联本地仓库至GitHub仓库：&lt;code&gt;git remote add origin [url]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上传本地仓库文件至GitHub远程仓库:  &lt;code&gt;git push -u origin master&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;再更改代码上传至远程仓库使用：&lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="programing" scheme="http://shifei.online/categories/programing/"/>
    
      <category term="keyboard" scheme="http://shifei.online/categories/programing/keyboard/"/>
    
    
      <category term="keyboard" scheme="http://shifei.online/tags/keyboard/"/>
    
      <category term="Git" scheme="http://shifei.online/tags/Git/"/>
    
  </entry>
  
</feed>
